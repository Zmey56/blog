{
  
    
        "post0": {
            "title": "Russian - Анализ ETF с использованием Python",
            "content": "Как использовать библиотеки Python, такие как Pandas, Matplotlib и Seaborn, для получения информации из ежедневных данных о ценах и объемах c фондового рынка. . С проникновением аналитики во многие сферы нашей жизни она не могла обойти стороной финансы. В этой статье рассмотрим ее применение для анализа ETF с целью их анализа, в том числе и с применением визуализиции. . 1. &#1054; &#1076;&#1072;&#1085;&#1085;&#1099;&#1093; . Для анализа будем использовать данные ETF с валютным хейджом: FXCN, FXRL, FXIT, FXUS и FXRU. Временной ряд рассмотрим за три года с 2018 по 2020 года. Само исследование проведем в Google Colaboratory. . Как обычно в начале импортируем все необходимые библиотеки для дальнейшей работы . import pandas as pd import numpy as np import matplotlib.pyplot as plt from google.colab import files import warnings warnings.filterwarnings(&quot;ignore&quot;) . Сначало необходимо загрузить данные, которые представлены в формате CSV. . uploaded = files.upload() for fn in uploaded.keys(): print(&#39;User uploaded file «{name}» with length {length} bytes&#39;.format(name=fn, length=len(uploaded[fn]))) . Upload widget is only available when the cell has been executed in the current browser session. Please rerun this cell to enable. Saving FXGD.csv to FXGD (1).csv Saving FXRU.csv to FXRU (1).csv Saving FXUS.csv to FXUS (1).csv Saving FXIT.csv to FXIT (1).csv Saving FXRL.csv to FXRL (1).csv Saving FXCN.csv to FXCN (1).csv User uploaded file «FXGD.csv» with length 53856 bytes User uploaded file «FXRU.csv» with length 32600 bytes User uploaded file «FXUS.csv» with length 56015 bytes User uploaded file «FXIT.csv» with length 56137 bytes User uploaded file «FXRL.csv» with length 55985 bytes User uploaded file «FXCN.csv» with length 56038 bytes . После этого прочтем данные с диска. Дальше необходимо создать два двадатафрейма - один с ценами закрытия, а другой с объемами торговли: . fxgd =pd.read_csv(&#39;/content/FXGD.csv&#39;) fxrl =pd.read_csv(&#39;/content/FXRL.csv&#39;) fxit =pd.read_csv(&#39;/content/FXIT.csv&#39;) fxus =pd.read_csv(&#39;/content/FXUS.csv&#39;) fxru =pd.read_csv(&#39;/content/FXRU.csv&#39;, sep=&#39;;&#39;) fxcn =pd.read_csv(&#39;/content/FXCN.csv&#39;) . def changeDF(df): df[&#39;date&#39;] = pd.to_datetime(df[&#39;&lt;DATE&gt;&#39;].astype(str), dayfirst=True) name =[x for x in globals() if globals()[x] is df][0] df = df.drop([&#39;&lt;DATE&gt;&#39;,&#39;&lt;TIME&gt;&#39;, &#39;&lt;OPEN&gt;&#39;, &#39;&lt;HIGH&gt;&#39;, &#39;&lt;LOW&gt;&#39;], axis=1) df = df.set_index([&#39;date&#39;]) df.columns = [name+&#39;_cl&#39;, name + &#39;_vol&#39;] return df . # df[&#39;date&#39;] = pd.to_datetime(df[&#39;&lt;DATE&gt;&#39;].astype(str), dayfirst=True) # name =[x for x in globals() if globals()[x] is df][0] # df = df.drop([&#39;&lt;DATE&gt;&#39;,&#39;&lt;TIME&gt;&#39;, &#39;&lt;OPEN&gt;&#39;, &#39;&lt;CLOSE&gt;&#39;, &#39;&lt;LOW&gt;&#39;], axis=1) # df = df.set_index([&#39;date&#39;]) # df.columns = [name] # return df . fxgd_change = changeDF(fxgd) fxrl_change = changeDF(fxrl) fxit_change = changeDF(fxit) fxus_change = changeDF(fxus) fxru_change = changeDF(fxru) fxcn_change = changeDF(fxcn) . etf = pd.concat([fxgd_change, fxrl_change, fxit_change, fxus_change, fxru_change, fxcn_change], axis=1) . etf.head() . fxgd_cl fxgd_vol fxrl_cl fxrl_vol fxit_cl fxit_vol fxus_cl fxus_vol fxru_cl fxru_vol fxcn_cl fxcn_vol . date . 2018-01-03 529.0 | 4340 | 1950.5 | 443 | 3612.0 | 581 | 2738.0 | 1049 | 641.0 | 139.0 | 2635.0 | 2098 | . 2018-01-04 527.0 | 1489 | 1992.0 | 659 | 3641.0 | 647 | 2745.0 | 586 | 639.0 | 128.0 | 2655.0 | 1331 | . 2018-01-05 526.0 | 1911 | 2004.5 | 846 | 3646.0 | 876 | 2744.0 | 322 | 637.0 | 306.0 | 2640.0 | 1664 | . 2018-01-09 525.5 | 5044 | 2024.0 | 2570 | 3673.0 | 1833 | 2766.0 | 653 | 638.0 | 448.0 | 2670.0 | 2304 | . 2018-01-10 527.5 | 9808 | 2030.0 | 765 | 3660.0 | 2485 | 2758.0 | 407 | 637.0 | 369.0 | 2665.0 | 1910 | . C FXRU пришлось немного поработать в EXCEL, так как скачанные данные прибивили лишний ноль к значению. По этому при загрузке пришлось указывать явный разделитель. . Дальше проверим наш датасет на предмет наличия значений NULL . print(etf.isnull().sum()) . fxgd_cl 0 fxgd_vol 0 fxrl_cl 0 fxrl_vol 0 fxit_cl 0 fxit_vol 0 fxus_cl 0 fxus_vol 0 fxru_cl 4 fxru_vol 4 fxcn_cl 0 fxcn_vol 0 dtype: int64 . Выбросим их, чтоб не мешали в дальнейшем расчете: . etf.dropna(inplace=True, axis=0) . Дальше имеет смысл посмотреть тип значений: . etf.dtypes . fxgd_cl float64 fxgd_vol int64 fxrl_cl float64 fxrl_vol int64 fxit_cl float64 fxit_vol int64 fxus_cl float64 fxus_vol int64 fxru_cl float64 fxru_vol float64 fxcn_cl float64 fxcn_vol int64 dtype: object . И посмотрим размер датасета: . etf.shape . (752, 12) . Так же дальше интересно посмотреть как вели себя ETF в последние полгода. Это можно сделать при помощи функции describe: . etf[-120:].describe() . fxgd_cl fxgd_vol fxrl_cl fxrl_vol fxit_cl fxit_vol fxus_cl fxus_vol fxru_cl fxru_vol fxcn_cl fxcn_vol . count 120.000000 | 120.000000 | 120.000000 | 120.000000 | 120.000000 | 120.000000 | 120.000000 | 120.000000 | 120.000000 | 120.000000 | 120.000000 | 120.000000 | . mean 973.690000 | 148832.116667 | 3121.208333 | 8971.225000 | 8860.925000 | 14784.708333 | 4758.458333 | 12685.116667 | 950.133333 | 32841.958333 | 3878.233333 | 17515.733333 | . std 36.967338 | 94656.673543 | 169.290817 | 6816.481138 | 572.529639 | 8391.294562 | 267.491739 | 7730.347512 | 28.046367 | 14373.882822 | 219.697987 | 14471.016798 | . min 878.000000 | 34678.000000 | 2848.500000 | 2907.000000 | 7513.000000 | 4769.000000 | 4140.000000 | 4392.000000 | 880.800000 | 11069.000000 | 3422.000000 | 4448.000000 | . 25% 946.100000 | 87124.250000 | 2998.000000 | 5388.500000 | 8466.500000 | 9388.750000 | 4578.000000 | 8902.000000 | 935.900000 | 21355.000000 | 3721.000000 | 8495.250000 | . 50% 985.900000 | 127780.500000 | 3083.000000 | 7584.500000 | 9051.500000 | 12681.500000 | 4807.500000 | 11277.000000 | 951.450000 | 29360.000000 | 3898.000000 | 12329.500000 | . 75% 1001.650000 | 175438.250000 | 3219.500000 | 10754.250000 | 9306.250000 | 17640.000000 | 4982.000000 | 13963.750000 | 971.050000 | 42583.750000 | 4064.500000 | 22652.250000 | . max 1033.600000 | 666819.000000 | 3488.500000 | 67809.000000 | 9776.000000 | 63506.000000 | 5157.000000 | 73672.000000 | 1012.800000 | 91275.000000 | 4312.000000 | 101084.000000 | . pct_chg_etf[:50].describe() . fxgd_cl_pct fxrl_cl_pct fxit_cl_pct fxus_cl_pct fxru_cl_pct fxcn_cl_pct . count 50.000000 | 50.000000 | 50.000000 | 50.000000 | 50.000000 | 50.000000 | . mean 0.018909 | 0.128734 | 0.141815 | 0.037679 | 0.010791 | 0.088726 | . std 0.634123 | 0.840398 | 1.222263 | 1.014099 | 0.544054 | 1.462912 | . min -1.291513 | -1.680871 | -4.318305 | -3.804348 | -1.550388 | -4.403670 | . 25% -0.381599 | -0.359217 | -0.432242 | -0.326851 | -0.312745 | -0.562852 | . 50% -0.094162 | 0.266967 | 0.175959 | 0.073884 | 0.000000 | 0.190041 | . 75% 0.379604 | 0.689444 | 0.847795 | 0.543863 | 0.319361 | 1.135292 | . max 1.826923 | 2.127660 | 3.065569 | 2.749529 | 1.107595 | 2.909091 | . В результате видно в каких пределах в последние полгода ETF провели большую часть аремени с вероятностью 75%. . После построим графики движения цены во времени. . fig, axs = plt.subplots(3, 2, figsize=(15,15)) axs[0, 0].plot(etf.index, etf[&#39;fxgd_cl&#39;], &#39;tab:blue&#39; ) axs[0, 0].set_title(&#39;FXGD&#39;) axs[0, 1].plot(etf.index, etf[&#39;fxrl_cl&#39;], &#39;tab:orange&#39;) axs[0, 1].set_title(&#39;FXRL&#39;) axs[1, 0].plot(etf.index, etf[&#39;fxit_cl&#39;], &#39;tab:green&#39;) axs[1, 0].set_title(&#39;FXIT&#39;) axs[1, 1].plot(etf.index, etf[&#39;fxus_cl&#39;], &#39;tab:red&#39;) axs[1, 1].set_title(&#39;FXUS&#39;) axs[2, 0].plot(etf.index, etf[&#39;fxru_cl&#39;], &#39;tab:grey&#39;) axs[2, 0].set_title(&#39;FXRU&#39;) axs[2, 1].plot(etf.index, etf[&#39;fxcn_cl&#39;], &#39;tab:purple&#39;) axs[2, 1].set_title(&#39;FXCN&#39;) for ax in axs.flat: ax.set(xlabel=&#39;Data&#39;, ylabel=&#39;Price&#39;) for ax in axs.flat: ax.label_outer() . Ежедневное процентное изменение цены etf вычисляется на основе процентного изменения между ценами закрытия 2 последовательных дней. Предположим, что цена закрытия вчера составляла 500 рублей, а сегодня она закрылась по 550 рублей. Таким образом, процентное изменение составляет 10%. т. е. ((550-500) / 500)*100. Здесь нет никакой тайны! . Далее, мы введем новый столбец, обозначающий дневную доходность в цене etf. Вычислить можно с помощью встроенной функции pct_change() в python. Так же немного переставлю колонки, чтоб визуально лучше воспринималось. . etf.columns . Index([&#39;fxgd_cl&#39;, &#39;fxgd_vol&#39;, &#39;fxrl_cl&#39;, &#39;fxrl_vol&#39;, &#39;fxit_cl&#39;, &#39;fxit_vol&#39;, &#39;fxus_cl&#39;, &#39;fxus_vol&#39;, &#39;fxru_cl&#39;, &#39;fxru_vol&#39;, &#39;fxcn_cl&#39;, &#39;fxcn_vol&#39;], dtype=&#39;object&#39;) . etf_cl = etf[[&#39;fxgd_cl&#39;, &#39;fxrl_cl&#39;, &#39;fxit_cl&#39;, &#39;fxus_cl&#39;, &#39;fxru_cl&#39;, &#39;fxcn_cl&#39;]] etf_cl_pct = etf_cl.pct_change()*100 etf_cl_pct.columns = [&#39;fxgd_cl_pct&#39;, &#39;fxrl_cl_pct&#39;, &#39;fxit_cl_pct&#39;, &#39;fxus_cl_pct&#39;, &#39;fxru_cl_pct&#39;, &#39;fxcn_cl_pct&#39;] etf_vol = etf[[&#39;fxgd_vol&#39;, &#39;fxrl_vol&#39;, &#39;fxit_vol&#39;, &#39;fxus_vol&#39;, &#39;fxru_vol&#39;, &#39;fxcn_vol&#39;]] etf_new = pd.concat([etf_cl, etf_vol, etf_cl_pct], axis = 1) . etf_new.head() . fxgd_cl fxrl_cl fxit_cl fxus_cl fxru_cl fxcn_cl fxgd_vol fxrl_vol fxit_vol fxus_vol fxru_vol fxcn_vol fxgd_cl_pct fxrl_cl_pct fxit_cl_pct fxus_cl_pct fxru_cl_pct fxcn_cl_pct . date . 2018-01-03 529.0 | 1950.5 | 3612.0 | 2738.0 | 641.0 | 2635.0 | 4340 | 443 | 581 | 1049 | 139.0 | 2098 | NaN | NaN | NaN | NaN | NaN | NaN | . 2018-01-04 527.0 | 1992.0 | 3641.0 | 2745.0 | 639.0 | 2655.0 | 1489 | 659 | 647 | 586 | 128.0 | 1331 | -0.378072 | 2.127660 | 0.802879 | 0.255661 | -0.312012 | 0.759013 | . 2018-01-05 526.0 | 2004.5 | 3646.0 | 2744.0 | 637.0 | 2640.0 | 1911 | 846 | 876 | 322 | 306.0 | 1664 | -0.189753 | 0.627510 | 0.137325 | -0.036430 | -0.312989 | -0.564972 | . 2018-01-09 525.5 | 2024.0 | 3673.0 | 2766.0 | 638.0 | 2670.0 | 5044 | 2570 | 1833 | 653 | 448.0 | 2304 | -0.095057 | 0.972811 | 0.740538 | 0.801749 | 0.156986 | 1.136364 | . 2018-01-10 527.5 | 2030.0 | 3660.0 | 2758.0 | 637.0 | 2665.0 | 9808 | 765 | 2485 | 407 | 369.0 | 1910 | 0.380590 | 0.296443 | -0.353934 | -0.289226 | -0.156740 | -0.187266 | . etf_new = etf_new.dropna() . Представим изменение ежедневной доходности в виде графика во времени: . fig, axs = plt.subplots(3, 2, figsize=(15,15)) axs[0, 0].plot(etf_new.index, etf_new[&#39;fxgd_cl_pct&#39;], &#39;tab:blue&#39;) axs[0, 0].set_title(&#39;FXGD&#39;) axs[0, 1].plot(etf_new.index, etf_new[&#39;fxrl_cl_pct&#39;], &#39;tab:orange&#39;) axs[0, 1].set_title(&#39;FXRL&#39;) axs[1, 0].plot(etf_new.index, etf_new[&#39;fxit_cl_pct&#39;], &#39;tab:green&#39;) axs[1, 0].set_title(&#39;FXIT&#39;) axs[1, 1].plot(etf_new.index, etf_new[&#39;fxus_cl_pct&#39;], &#39;tab:red&#39;) axs[1, 1].set_title(&#39;FXUS&#39;) axs[2, 0].plot(etf_new.index, etf_new[&#39;fxru_cl_pct&#39;], &#39;tab:grey&#39;) axs[2, 0].set_title(&#39;FXRU&#39;) axs[2, 1].plot(etf_new.index, etf_new[&#39;fxcn_cl_pct&#39;], &#39;tab:purple&#39;) axs[2, 1].set_title(&#39;FXCN&#39;) for ax in axs.flat: ax.set(xlabel=&#39;Data&#39;, ylabel=&#39;Price&#39;) for ax in axs.flat: ax.label_outer() . В течение большей части времени доходность составляет от -2% до 2% со скачками без пересечения отметки в 6% с обеих сторон. Наиболее шумной выглядит ETF FXCN. . Так же можно проверить новостные статьи за те дни, когда наблюдался резкий рост/падение цен на etf и понять чем было обусловлено. . Построим гистограмму распределения ежедневных доходов: . import seaborn as sns sns.set(style=&quot;darkgrid&quot;) fig, axs = plt.subplots(3, 2, figsize=(15,15)) sns.histplot(data=etf_new[&#39;fxgd_cl_pct&#39;], kde=True, color=&quot;orange&quot;, ax=axs[0, 0]) axs[0,0].set_xlim(-10,10) sns.histplot(data=etf_new[&#39;fxrl_cl_pct&#39;], kde=True, color=&quot;olive&quot;, ax=axs[0, 1]) axs[0,1].set_xlim(-10,10) sns.histplot(data=etf_new[&#39;fxit_cl_pct&#39;], kde=True, color=&quot;gold&quot;, ax=axs[1, 0]) axs[1,0].set_xlim(-10,10) sns.histplot(data=etf_new[&#39;fxus_cl_pct&#39;], kde=True, color=&quot;grey&quot;, ax=axs[1, 1]) axs[1,1].set_xlim(-10,10) sns.histplot(data=etf_new[&#39;fxru_cl_pct&#39;], kde=True, color=&quot;teal&quot;, ax=axs[2, 0]) axs[2,0].set_xlim(-10,10) sns.histplot(data=etf_new[&#39;fxcn_cl_pct&#39;], kde=True, color=&quot;brown&quot;, ax=axs[2, 1]) axs[2,1].set_xlim(-10,10) plt.show() . etf_new[[&#39;fxgd_cl_pct&#39;, &#39;fxrl_cl_pct&#39;, &#39;fxit_cl_pct&#39;, &#39;fxus_cl_pct&#39;, &#39;fxru_cl_pct&#39;, &#39;fxcn_cl_pct&#39;]].describe() . fxgd_cl_pct fxrl_cl_pct fxit_cl_pct fxus_cl_pct fxru_cl_pct fxcn_cl_pct . count 751.000000 | 751.000000 | 751.000000 | 751.000000 | 751.000000 | 751.000000 | . mean 0.084329 | 0.084240 | 0.140564 | 0.089850 | 0.056374 | 0.065255 | . std 1.081425 | 1.163047 | 1.398492 | 1.141144 | 0.771131 | 1.414819 | . min -5.709816 | -8.065290 | -6.874365 | -8.567335 | -5.198422 | -5.273973 | . 25% -0.456676 | -0.444714 | -0.574001 | -0.444633 | -0.346166 | -0.752409 | . 50% 0.030111 | 0.126835 | 0.206940 | 0.137979 | 0.026178 | 0.128783 | . 75% 0.622500 | 0.718721 | 0.887283 | 0.645403 | 0.445645 | 0.899653 | . max 5.619982 | 7.784431 | 8.297990 | 6.079599 | 4.604008 | 6.554307 | . Гистограммы ежедневных доходностей центрированы вокруг среднего значения, которое для всех etf было больше нуля и говорит о положительном тренде. Видно, что доходность для всех ETF большую часть времени лежала в пределах от -2,5 до 2,5%. Наибольшую доходность показали - FXIT, а наименьшую - FXRU. . 2. &#1040;&#1085;&#1072;&#1083;&#1080;&#1079; &#1090;&#1088;&#1077;&#1085;&#1076;&#1072; . Затем мы добавляем новый столбец &quot;Тренд&quot;, значения которого основаны на ежедневном процентном изменении, которое мы рассчитали выше. Тенденция определяется отношением снизу. Скопируем датасет в новый, с которым и продолжим работу. . def trend(x): if x &gt; -0.5 and x &lt;= 0.5: return &#39;Практически или без изменений&#39; elif x &gt; 0.5 and x &lt;= 1.5: return &#39;Небольшой позитив&#39; elif x &gt; -1.5 and x &lt;= -0.5: return &#39;Небольшой негатив&#39; elif x &gt; 1.5 and x &lt;= 2.5: return &#39;Позитив&#39; elif x &gt; -2.5 and x &lt;= -1.5: return &#39;Негатив&#39; elif x &gt; 2.5 and x &lt;= 5: return &#39;Значительный позитив&#39; elif x &gt; -5 and x &lt;= -2.5: return &#39;Значительный негатив&#39; elif x &gt; 5: return &#39;Максимальный позитив&#39; elif x &lt;= -5: return &#39;Максимальный негатив&#39; . etf_trend = etf_new.copy() . etf_trend.columns[12:] . Index([&#39;fxgd_cl_pct&#39;, &#39;fxrl_cl_pct&#39;, &#39;fxit_cl_pct&#39;, &#39;fxus_cl_pct&#39;, &#39;fxru_cl_pct&#39;, &#39;fxcn_cl_pct&#39;], dtype=&#39;object&#39;) . for stock in etf_trend.columns[12:]: etf_trend[&quot;Trend_&quot; + str(stock)] = np.zeros(etf_trend[stock].count()) etf_trend[&quot;Trend_&quot;+ str(stock)] = etf_trend[stock].apply(lambda x:trend(x)) . etf_trend.head() . fxgd_cl fxrl_cl fxit_cl fxus_cl fxru_cl fxcn_cl fxgd_vol fxrl_vol fxit_vol fxus_vol fxru_vol fxcn_vol fxgd_cl_pct fxrl_cl_pct fxit_cl_pct fxus_cl_pct fxru_cl_pct fxcn_cl_pct Trend_fxgd_cl_pct Trend_fxrl_cl_pct Trend_fxit_cl_pct Trend_fxus_cl_pct Trend_fxru_cl_pct Trend_fxcn_cl_pct . date . 2018-01-04 527.0 | 1992.0 | 3641.0 | 2745.0 | 639.0 | 2655.0 | 1489 | 659 | 647 | 586 | 128.0 | 1331 | -0.378072 | 2.127660 | 0.802879 | 0.255661 | -0.312012 | 0.759013 | Практически или без изменений | Позитив | Небольшой позитив | Практически или без изменений | Практически или без изменений | Небольшой позитив | . 2018-01-05 526.0 | 2004.5 | 3646.0 | 2744.0 | 637.0 | 2640.0 | 1911 | 846 | 876 | 322 | 306.0 | 1664 | -0.189753 | 0.627510 | 0.137325 | -0.036430 | -0.312989 | -0.564972 | Практически или без изменений | Небольшой позитив | Практически или без изменений | Практически или без изменений | Практически или без изменений | Небольшой негатив | . 2018-01-09 525.5 | 2024.0 | 3673.0 | 2766.0 | 638.0 | 2670.0 | 5044 | 2570 | 1833 | 653 | 448.0 | 2304 | -0.095057 | 0.972811 | 0.740538 | 0.801749 | 0.156986 | 1.136364 | Практически или без изменений | Небольшой позитив | Небольшой позитив | Небольшой позитив | Практически или без изменений | Небольшой позитив | . 2018-01-10 527.5 | 2030.0 | 3660.0 | 2758.0 | 637.0 | 2665.0 | 9808 | 765 | 2485 | 407 | 369.0 | 1910 | 0.380590 | 0.296443 | -0.353934 | -0.289226 | -0.156740 | -0.187266 | Практически или без изменений | Практически или без изменений | Практически или без изменений | Практически или без изменений | Практически или без изменений | Практически или без изменений | . 2018-01-11 526.0 | 2042.0 | 3673.0 | 2755.0 | 635.0 | 2650.0 | 5548 | 1220 | 1282 | 968 | 326.0 | 1722 | -0.284360 | 0.591133 | 0.355191 | -0.108774 | -0.313972 | -0.562852 | Практически или без изменений | Небольшой позитив | Практически или без изменений | Практически или без изменений | Практически или без изменений | Небольшой негатив | . etf_trend[&#39;Trend_fxgd_cl_pct&#39;].value_counts() . Практически или без изменений 351 Небольшой позитив 166 Небольшой негатив 141 Позитив 44 Негатив 25 Значительный позитив 13 Значительный негатив 7 Максимальный негатив 2 Максимальный позитив 2 Name: Trend_fxgd_cl_pct, dtype: int64 . Дальше можно взглянуть как вели себя акции акцииETF в последние 3 года. Для этого их изменения можно визуализировать при помощи круговых диаграмм, где каждый сектор представляет процент дней, в течение которых происходил каждый тренд. Для построения будем использовать функцию groupby() со столбцом тренда. . sns.set(style=&quot;darkgrid&quot;) fig, axs = plt.subplots(3, 2, figsize=(20,17)) axs[0, 0].pie(etf_trend[&#39;Trend_fxgd_cl_pct&#39;].value_counts(), labels = etf_trend[&#39;Trend_fxgd_cl_pct&#39;].value_counts().index, autopct=&quot;%.1f%%&quot;) axs[0, 0].set_title(&#39;FXGD&#39;) axs[0, 1].pie(etf_trend[&#39;Trend_fxrl_cl_pct&#39;].value_counts(), labels = etf_trend[&#39;Trend_fxrl_cl_pct&#39;].value_counts().index, autopct=&quot;%.1f%%&quot;) axs[0, 1].set_title(&#39;FXRL&#39;) axs[1, 0].pie(etf_trend[&#39;Trend_fxit_cl_pct&#39;].value_counts(), labels = etf_trend[&#39;Trend_fxit_cl_pct&#39;].value_counts().index, autopct=&quot;%.1f%%&quot;) axs[1, 0].set_title(&#39;FXIT&#39;) axs[1, 1].pie(etf_trend[&#39;Trend_fxus_cl_pct&#39;].value_counts(), labels = etf_trend[&#39;Trend_fxus_cl_pct&#39;].value_counts().index, autopct=&quot;%.1f%%&quot;) axs[1, 1].set_title(&#39;FXUS&#39;) axs[2, 0].pie(etf_trend[&#39;Trend_fxru_cl_pct&#39;].value_counts(), labels = etf_trend[&#39;Trend_fxru_cl_pct&#39;].value_counts().index, autopct=&quot;%.1f%%&quot;) axs[2, 0].set_title(&#39;FXRU&#39;) axs[2, 1].pie(etf_trend[&#39;Trend_fxcn_cl_pct&#39;].value_counts(), labels = etf_trend[&#39;Trend_fxcn_cl_pct&#39;].value_counts().index, autopct=&quot;%.1f%%&quot;) axs[2, 1].set_title(&#39;FXCN&#39;) plt.show() . За рассматриваемый период с 2018 года по 2020 года большую часть времени ETF практически не изменялись, или изменялись незначительно при заданных параметрах. Так же важно отметить, что при небольших изменениях они как правило были позитивными. При более больших - это соотношение сохранялось кроме FXRU. . 6. &#1045;&#1078;&#1077;&#1076;&#1085;&#1077;&#1074;&#1085;&#1072;&#1103; &#1076;&#1086;&#1093;&#1086;&#1076;&#1085;&#1086;&#1089;&#1090;&#1100; &#1080; &#1086;&#1073;&#1098;&#1077;&#1084;&#1099; . Следующим шагом продолжим работу с объемами: . sns.set(style=&quot;darkgrid&quot;) fig, axs = plt.subplots(6, 1, figsize=(30,35)) axs[0].stem(etf_trend.index[-253:], etf_trend[&#39;fxgd_cl_pct&#39;][-253:]) axs[0].plot((etf_trend[&#39;fxgd_vol&#39;]/10000)[-253:], color = &#39;green&#39;, alpha = 0.5) axs[0].set_title(&#39;FXGD&#39;) axs[1].stem(etf_trend.index[-253:], etf_trend[&#39;fxrl_cl_pct&#39;][-253:]) axs[1].plot((etf_trend[&#39;fxrl_vol&#39;]/10000)[-253:], color = &#39;green&#39;, alpha = 0.5) axs[1].set_title(&#39;FXRL&#39;) axs[2].stem(etf_trend.index[-253:], etf_trend[&#39;fxit_cl_pct&#39;][-253:]) axs[2].plot((etf_trend[&#39;fxit_vol&#39;]/10000)[-253:], color = &#39;green&#39;, alpha = 0.5) axs[2].set_title(&#39;FXIT&#39;) axs[3].stem(etf_trend.index[-253:], etf_trend[&#39;fxus_cl_pct&#39;][-253:]) axs[3].plot((etf_trend[&#39;fxus_vol&#39;]/10000)[-253:], color = &#39;green&#39;, alpha = 0.5) axs[3].set_title(&#39;FXUS&#39;) axs[4].stem(etf_trend.index[-253:], etf_trend[&#39;fxru_cl_pct&#39;][-253:]) axs[4].plot((etf_trend[&#39;fxru_vol&#39;]/10000)[-253:], color = &#39;green&#39;, alpha = 0.5) axs[4].set_title(&#39;FXRU&#39;) axs[5].stem(etf_trend.index[-253:], etf_trend[&#39;fxcn_cl_pct&#39;][-253:]) axs[5].plot((etf_trend[&#39;fxcn_vol&#39;]/10000)[-253:], color = &#39;green&#39;, alpha = 0.5) axs[5].set_title(&#39;FXCN&#39;) . Text(0.5, 1.0, &#39;FXCN&#39;) . Сопоставляя ежедневный объем торговли(зеленым цветом) с ежедневной доходностью(синим цветом), было отмечено, что часто для ETF характерно, что когда объем торгов высок, наблюдается сравнительно высокий рост или падение цены. Объем торгов ETF в сочетании с ростом или падениемы на данный инструмент является показателем доверия трейдеров и инвесторов к конкретному ETF. . &#1050;&#1086;&#1088;&#1088;&#1077;&#1083;&#1103;&#1094;&#1080;&#1086;&#1085;&#1085;&#1099;&#1081; &#1072;&#1085;&#1072;&#1083;&#1080;&#1079; ETF . Основное правило диверсификации - не клади все яйца в одну корзинку. По этому если мы решили собирать портфель из ETF, то они не должны быть сильно взаимосвязаны друг с другом. Математическим языком - коэффициент корреляции Пирсона между любой парой должен быть близок к 0. Смысл - они не должны падать синхронно, чтоб инвестиции не превратились в 0. . Проанализировать корреляцию между различными ETF можно с помощью парной диаграммы Seaborn. Для удобства оставим только процентные изменения за день в отдельном новом датафрейме. . pct_chg_etf = etf_new[etf_new.columns[12:]] . sns.set(style = &#39;ticks&#39;, font_scale = 1.25) sns.pairplot(pct_chg_etf) plt.show() . pct_chg_etf.corr() . fxgd_cl_pct fxrl_cl_pct fxit_cl_pct fxus_cl_pct fxru_cl_pct fxcn_cl_pct . fxgd_cl_pct 1.000000 | -0.236301 | 0.107085 | 0.119773 | 0.590029 | 0.139992 | . fxrl_cl_pct -0.236301 | 1.000000 | 0.335061 | 0.300352 | -0.384120 | 0.232063 | . fxit_cl_pct 0.107085 | 0.335061 | 1.000000 | 0.895261 | 0.138016 | 0.641551 | . fxus_cl_pct 0.119773 | 0.300352 | 0.895261 | 1.000000 | 0.202682 | 0.610576 | . fxru_cl_pct 0.590029 | -0.384120 | 0.138016 | 0.202682 | 1.000000 | 0.197225 | . fxcn_cl_pct 0.139992 | 0.232063 | 0.641551 | 0.610576 | 0.197225 | 1.000000 | . На графике визуально можно увидеть наличие корреляции между различными ETF. Обратите внимание, что корреляционный анализ выполняется для ежедневного процентного изменения(дневной доходности) цены ETF, а не для их цены. . Из полученных графиков ясно видно, что следующие FXIT и FXUS не следует класть в одну корзину, так как между нми наблюдается сильная зависимость. Остальные могут быть включены в портфель, поскольку ни одна из двух оставшихся ETF не демонстрирует какой-либо существенной корреляции. . Но у визуального анализа есть существенный недостаток - он не предоставляет подробной информации о количественной оценки взаимосвязи, таких как значение R Пирсона и p нулевой гипотезы. В связи с чем при визуальном анализе остается под вопросом FXCN - есть ли у данного ETF сильная взаимосвязь с FXUS или нет. . Один из способов решения данного вопроса - построение графиков seaborn.jointplot с подробной информацией по значению R Пирсона (коэффициент корреляции Пирсона) для каждой пары ETF. Значение R Пирсона колеблется от -1 до 1. Отрицательное значение указывает на отрицательную линейную связь, в то время как положительное значение указывает на положительную связь. Значение R Пирсона ближе к 1 (или -1) указывает на сильную корреляцию, в то время как значение ближе к 0 указывает на слабую корреляцию. . Так же чем интересны данные графики - построение гистограмм распределения по краям, а так же значение p-value. . Но если рассматривать все пары, то нам потребуется большое количество графиков. По этому остановимся только на тех, которые вызывают сомнения: . pct_chg_etf.head() . fxgd_cl_pct fxrl_cl_pct fxit_cl_pct fxus_cl_pct fxru_cl_pct fxcn_cl_pct . date . 2018-01-04 -0.378072 | 2.127660 | 0.802879 | 0.255661 | -0.312012 | 0.759013 | . 2018-01-05 -0.189753 | 0.627510 | 0.137325 | -0.036430 | -0.312989 | -0.564972 | . 2018-01-09 -0.095057 | 0.972811 | 0.740538 | 0.801749 | 0.156986 | 1.136364 | . 2018-01-10 0.380590 | 0.296443 | -0.353934 | -0.289226 | -0.156740 | -0.187266 | . 2018-01-11 -0.284360 | 0.591133 | 0.355191 | -0.108774 | -0.313972 | -0.562852 | . from scipy.stats import stats a_1 = pct_chg_etf.fxit_cl_pct b_1 = pct_chg_etf.fxus_cl_pct b_2 = pct_chg_etf.fxcn_cl_pct g_1 = sns.jointplot(&#39;fxit_cl_pct&#39;, &#39;fxcn_cl_pct&#39;, pct_chg_etf, kind = &#39;scatter&#39;) r_1, p_1 = stats.pearsonr(a_1, b_1) g_1.ax_joint.annotate(f&#39;$ rho = {r_1:.3f}, p = {p_1:.3f}$&#39;, xy=(0.1, 0.9), xycoords=&#39;axes fraction&#39;, ha=&#39;left&#39;, va=&#39;center&#39;, bbox={&#39;boxstyle&#39;: &#39;round&#39;, &#39;fc&#39;: &#39;powderblue&#39;, &#39;ec&#39;: &#39;navy&#39;}) g_1.ax_joint.scatter(a_1, b_1) g_1.set_axis_labels(xlabel=&#39;fxit&#39;, ylabel=&#39;fxus&#39;, size=15) g_2 = sns.jointplot(&#39;fxus_cl_pct&#39;, &#39;fxit_cl_pct&#39;, pct_chg_etf, kind = &#39;scatter&#39;) r_2, p_2 = stats.pearsonr(a_1, b_2) g_2.ax_joint.annotate(f&#39;$ rho = {r_2:.3f}, p = {p_2:.3f}$&#39;, xy=(0.1, 0.9), xycoords=&#39;axes fraction&#39;, ha=&#39;left&#39;, va=&#39;center&#39;, bbox={&#39;boxstyle&#39;: &#39;round&#39;, &#39;fc&#39;: &#39;powderblue&#39;, &#39;ec&#39;: &#39;navy&#39;}) g_2.ax_joint.scatter(a_1, b_2) g_2.set_axis_labels(xlabel=&#39;fxit&#39;, ylabel=&#39;fxcn&#39;, size=15) plt.tight_layout() plt.show() . Первый гррафик подтвердил наличие сильной взаимосвязи между FXIT и FXUS, что говорит о нежелательности их брать в один портфель. В свою очередь корреляция между FXCN и FXIT оказалась ниже 0,7, что говорит о возможности совместного нахождения в одной корзине. . 9. &#1040;&#1085;&#1072;&#1083;&#1080;&#1079; &#1074;&#1086;&#1083;&#1072;&#1090;&#1080;&#1083;&#1100;&#1085;&#1086;&#1089;&#1090;&#1080; . Волатильность-один из важнейших показателей на финансовых рынках. Говорят, что ценная бумага обладает высокой волатильностью, если ее стоимость может резко измениться за короткий промежуток времени. С другой стороны, более низкая волатильность означает, что стоимость имеет тенденцию быть относительно стабильной в течение определенного периода времени. Эти изменения обусловлены несколькими факторами, включая спрос и предложение, настроения, жадность, страх и т.д. Математически волатильность измеряется с помощью статистической меры, называемой &quot;стандартным отклонением&quot;, которая измеряет отклонение актива от его средней стоимости. . Произведем рассчет 5-дневной скользящей средней дневной доходности и стандартного отклонения. После этого построим график. Все это можно выполнить при помощи функций Pandas rolling() и std(). . sns.set(style=&quot;darkgrid&quot;) fig, axs = plt.subplots(6, 1, figsize=(30,35)) for i, etf in enumerate(pct_chg_etf.columns): axs[i].plot(pct_chg_etf[etf].rolling(5).std()*np.sqrt(5)) axs[i].plot(pct_chg_etf[etf].rolling(7).mean()) axs[i].set_title(etf[:4], size=20) . volatility = pct_chg_etf[[&#39;fxgd_cl_pct&#39;, &#39;fxrl_cl_pct&#39;, &#39;fxit_cl_pct&#39;, &#39;fxus_cl_pct&#39;,&#39;fxru_cl_pct&#39;, &#39;fxcn_cl_pct&#39;]].rolling(5).std()*np.sqrt(5) . volatility[:150].plot(linewidth=4, figsize = (35, 15)) plt.legend(loc=2, prop={&#39;size&#39;: 16}) . &lt;matplotlib.legend.Legend at 0x7f6bad8d31d0&gt; . Как результат вы можете заметить, что наиболее сильная низкая волатильность характерна для ETF на российские акции - FXRU. Многие трейдеры и инвесторы ищут инвестиции с более высокой волатильностью, чтобы получать более высокую прибыль. Если финансовый инструмент не движется, он не только обладает низкой волатильностью, но и имеет низкий потенциал прибыли. С другой стороны, ценные бумаги с очень высоким уровнем волатильности могут иметь огромный потенциал прибыли, но риск также высок. .",
            "url": "https://zmey56.github.io/blog//russian/python/algotrading/portfolio/optimization/2021/09/18/data-analysis-visualization-finance.html",
            "relUrl": "/russian/python/algotrading/portfolio/optimization/2021/09/18/data-analysis-visualization-finance.html",
            "date": " • Sep 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Russian - Оптимизации портфеля с помощью Python и PyPortfolioOpt",
            "content": "&#1054;&#1087;&#1090;&#1080;&#1084;&#1080;&#1079;&#1072;&#1094;&#1080;&#1080; &#1087;&#1086;&#1088;&#1090;&#1092;&#1077;&#1083;&#1103; &#1089; &#1087;&#1086;&#1084;&#1086;&#1097;&#1100;&#1102; Python . Вычисление оптимизированных весов активов в портфеле используя Портфельную теорию Марковица при помощи Python . &#1055;&#1086;&#1088;&#1090;&#1092;&#1077;&#1083;&#1100;&#1085;&#1072;&#1103; &#1090;&#1077;&#1086;&#1088;&#1080;&#1103; &#1052;&#1072;&#1088;&#1082;&#1086;&#1074;&#1080;&#1094;&#1072; . Портфельная теория Марковица(далее ПТМ) (Modern portfolio theory) — разработанная Гарри Марковицем методика формирования инвестиционного портфеля, направленная на оптимальный выбор активов, исходя из требуемого соотношения доходность/риск. Сформулированные им в 1950-х годах идеи составляют основу современной портфельной теории. . Основные положения портфельной теории были сформулированы Гарри Марковицем при подготовке им докторской диссертации в 1950—1951 годах. . Рождением же портфельной теории Марковица считается опубликованная в «Финансовом журнале» в 1952 году статья «Выбор портфеля». В ней он впервые предложил математическую модель формирования оптимального портфеля и привёл методы построения портфелей при определённых условиях. Основная заслуга Марковица состояла в предложении вероятностной формализации понятий «доходность» и «риск», что позволило перевести задачу выбора оптимального портфеля на формальный математический язык. Надо отметить, что в годы создания теории Марковиц работал в RAND Corp., вместе с одним из основателей линейной и нелинейной оптимизации — Джорджем Данцигом и сам участвовал в решении указанных задач. Поэтому собственная теория, после необходимой формализации, хорошо ложилась в указанное русло. . Марковиц постоянно занимается усовершенствованием своей теории и в 1959 году выпускает первую посвящённую ей монографию «Выбор портфеля: эффективная диверсификация инвестиций». . В 1990 году, когда Марковицу вручают Нобелевскую премию, выходит книга «Средне-дисперсионный анализ при выборе портфеля и рынка капитала» ссылка. . &#1054;&#1089;&#1085;&#1086;&#1074;&#1072; &#1084;&#1086;&#1076;&#1077;&#1083;&#1080; . Ожидаемая доходность портфеля(Portfolio Expected Return) | Ожидаемая доходность портфеля будет зависеть от ожидаемой доходности каждого из активов, входящих в него. Такой подход позволяет снизить риск за счет диверсификации и одновременно максимизировать доход инвестора, поскольку убытки по одним инвестициям будут компенсированы доходом по другим. . Ожидаемая доходность портфеля представляет собой суммарную ожидаемую доходность входящих в него ценных бумаг, взвешенную с учетом их доли в портфеле. . $$ E(R_{p}) = sum_{i=1}^nw_{i}E(R_{i}) $$ 2. &#1044;&#1080;&#1089;&#1087;&#1077;&#1088;&#1089;&#1080;&#1103; &#1087;&#1086;&#1088;&#1090;&#1092;&#1077;&#1083;&#1103; (Portfolio Variance ) . Дисперсия портфеля - это процесс, который определяет степень риска или волатильности, связанной с инвестиционным портфелем. Основная формула для расчета этой дисперсии фокусируется на взаимосвязи между так называемой дисперсией доходности и ковариацией, связанной с каждой из ценных бумаг, найденных в портфеле, а также с процентом или частью портфеля, который представляет каждая ценная бумага. . $$ sigma_{p}^{2} = sum_{i}^{} omega_{i}^{2} sigma_{i}^{2}+ sum_{i}^{} sum_{j neq i}^{} omega_{i}^{} omega_{j}^{} sigma_{i}^{} sigma_{j}^{} rho_{ij} $$ 3. &#1050;&#1086;&#1101;&#1092;&#1092;&#1080;&#1094;&#1080;&#1077;&#1085;&#1090; &#1064;&#1072;&#1088;&#1087;&#1072; (Sharpe Ratio) . Коэффициент Шарпа измеряет доходность инвестиций по отношению к безрисковой ставке (казначейской ставке) и степени риска. В целом, более высокое значение коэффициента Шарпа указывает на лучшие и более прибыльные инвестиции. Таким образом, если сравнивать два портфеля с одинаковыми рисками, то при прочих равных условиях было бы лучше инвестировать в портфель с более высоким коэффициентом Шарпа. . $$ frac{R_{p} - R_{f}}{ sigma_{p}} $$$$R_{p} - доходность портфеля R_{f} - безрисковая ставка sigma_{p} - стандартное отклонение доходности портфеля$$ 4. &#1069;&#1092;&#1092;&#1077;&#1082;&#1090;&#1080;&#1074;&#1085;&#1072;&#1103; &#1075;&#1088;&#1072;&#1085;&#1080;&#1094;&#1072; (The Efficient Frontier ) . Определение и рисунок из Википедии: . Граница эффективности (англ. Efficient frontier) в портфельной теории Марковица — инвестиционный портфель, оптимизированный в отношении риска и доходности. Формально границей эффективности является набор портфелей, удовлетворяющих такому условию, что не существует другого портфеля с более высокой ожидаемой доходностью, но с таким же стандартным отклонением доходности. Понятие границы эффективности было впервые сформулировано Гарри Марковицем в 1952 году в модели Марковица. . Портфель может быть охарактеризован как «эффективный», если он имеет максимально возможный ожидаемый уровень доходности для своего уровня риска (который представлен стандартным отклонением доходности портфеля). Так, на график соотношения риска и доходности может быть нанесена любая возможная комбинация рискованных активов, и совокупность всех таких возможных портфелей определяет регион в этом пространстве. При отсутствии в портфеле безрискового актива граница эффективности определяется верхней (восходящей) частью гиперболы, ограничивающей область допустимых решений для всех соотношений активов в портфеле. . В случае же, если в портфель может быть включён безрисковый актив, граница эффективности вырождается в отрезок прямой линии, исходящий от значения доходности безрискового актива на оси ординат (ожидаемая доходность портфеля) и проходящий по касательной к границе области допустимых решений. Все портфели на отрезке между собственно безрисковым активом и точкой касания состоят из комбинации безрискового актива и рисковых активов, в то время как все портфели на линии выше и справа от точки касания образуются короткой позицией в безрисковом активе и инвестированием в рисковые активы. . . . &#1054;&#1087;&#1090;&#1080;&#1084;&#1080;&#1079;&#1072;&#1094;&#1080;&#1103; &#1087;&#1086;&#1088;&#1090;&#1092;&#1077;&#1083;&#1103; &#1085;&#1072; Python . 1. &#1048;&#1084;&#1087;&#1086;&#1088;&#1090; &#1085;&#1077;&#1086;&#1073;&#1093;&#1086;&#1076;&#1080;&#1084;&#1099;&#1093; &#1073;&#1080;&#1073;&#1083;&#1080;&#1086;&#1090;&#1077;&#1082; . Как обычно в начале импортируем все необходимые библиотеки для дальнейшей работы . import matplotlib.pyplot as plt import numpy as np import pandas as pd import pandas_datareader as web from matplotlib.ticker import FuncFormatter . Непосредственно для анализа и оптимизации портфеля существует библиотека PyPortfolioOpt. Так как она не входит в стандартный набор, то ее необходимо установить. . !pip install PyPortfolioOpt #Installing the Portfolio Optimzation Library . Collecting PyPortfolioOpt Downloading https://files.pythonhosted.org/packages/46/55/7d39d78d554ee33a7317e345caf01339da11406c28f18bc48794fe967935/PyPortfolioOpt-1.4.1-py3-none-any.whl (56kB) |████████████████████████████████| 61kB 3.2MB/s Requirement already satisfied: pandas&gt;=0.19 in /usr/local/lib/python3.7/dist-packages (from PyPortfolioOpt) (1.1.5) Requirement already satisfied: scipy&lt;2.0,&gt;=1.3 in /usr/local/lib/python3.7/dist-packages (from PyPortfolioOpt) (1.4.1) Collecting cvxpy&lt;2.0.0,&gt;=1.1.10 Downloading https://files.pythonhosted.org/packages/83/47/fd1e818b8da30ef18695a0fbf9b66611ab18506f0a44fc69480a75f4db1b/cvxpy-1.1.12.tar.gz (1.3MB) |████████████████████████████████| 1.3MB 7.9MB/s Installing build dependencies ... done Getting requirements to build wheel ... done Preparing wheel metadata ... done Requirement already satisfied: numpy&lt;2.0,&gt;=1.12 in /usr/local/lib/python3.7/dist-packages (from PyPortfolioOpt) (1.19.5) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.19-&gt;PyPortfolioOpt) (2.8.1) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.19-&gt;PyPortfolioOpt) (2018.9) Requirement already satisfied: ecos&gt;=2 in /usr/local/lib/python3.7/dist-packages (from cvxpy&lt;2.0.0,&gt;=1.1.10-&gt;PyPortfolioOpt) (2.0.7.post1) Requirement already satisfied: scs&gt;=1.1.6 in /usr/local/lib/python3.7/dist-packages (from cvxpy&lt;2.0.0,&gt;=1.1.10-&gt;PyPortfolioOpt) (2.1.3) Requirement already satisfied: osqp&gt;=0.4.1 in /usr/local/lib/python3.7/dist-packages (from cvxpy&lt;2.0.0,&gt;=1.1.10-&gt;PyPortfolioOpt) (0.6.2.post0) Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas&gt;=0.19-&gt;PyPortfolioOpt) (1.15.0) Requirement already satisfied: qdldl in /usr/local/lib/python3.7/dist-packages (from osqp&gt;=0.4.1-&gt;cvxpy&lt;2.0.0,&gt;=1.1.10-&gt;PyPortfolioOpt) (0.1.5.post0) Building wheels for collected packages: cvxpy Building wheel for cvxpy (PEP 517) ... done Created wheel for cvxpy: filename=cvxpy-1.1.12-cp37-cp37m-linux_x86_64.whl size=2731641 sha256=2c888a76787438c69d6a1dce26762a30ead689ee8b9da895efc81ad29620fbdf Stored in directory: /root/.cache/pip/wheels/9b/62/55/1da181c05c710c5d99bd560edebec3bd6a61cb69acef9dc00e Successfully built cvxpy Installing collected packages: cvxpy, PyPortfolioOpt Found existing installation: cvxpy 1.0.31 Uninstalling cvxpy-1.0.31: Successfully uninstalled cvxpy-1.0.31 Successfully installed PyPortfolioOpt-1.4.1 cvxpy-1.1.12 . Импортируем функции для дальнейшей работы: . from pypfopt.efficient_frontier import EfficientFrontier from pypfopt import risk_models from pypfopt import expected_returns from pypfopt.cla import CLA import pypfopt.plotting as pplt from matplotlib.ticker import FuncFormatter from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices . 2. &#1055;&#1086;&#1083;&#1091;&#1095;&#1077;&#1085;&#1080;&#1077; &#1076;&#1072;&#1085;&#1085;&#1099;&#1093; &#1087;&#1086; &#1072;&#1082;&#1094;&#1080;&#1103;&#1084; &#1080;&#1079; &#1080;&#1085;&#1090;&#1077;&#1088;&#1085;&#1077;&#1090;&#1072; . Сначало установим опять пакет, который не входит в стандартный набор. Он позволяет получить данные по акциям с сайтя yahoo. . Тикеры, которые будут использоваться для анализа - одна из компаний входящих в лидеры в своем секторе. . !pip install yfinance --upgrade --no-cache-dir . Collecting yfinance Downloading https://files.pythonhosted.org/packages/a7/ee/315752b9ef281ba83c62aa7ec2e2074f85223da6e7e74efb4d3e11c0f510/yfinance-0.1.59.tar.gz Requirement already satisfied, skipping upgrade: pandas&gt;=0.24 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.1.5) Requirement already satisfied, skipping upgrade: numpy&gt;=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.19.5) Requirement already satisfied, skipping upgrade: requests&gt;=2.20 in /usr/local/lib/python3.7/dist-packages (from yfinance) (2.23.0) Requirement already satisfied, skipping upgrade: multitasking&gt;=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.9) Collecting lxml&gt;=4.5.1 Downloading https://files.pythonhosted.org/packages/30/c0/d0526314971fc661b083ab135747dc68446a3022686da8c16d25fcf6ef07/lxml-4.6.3-cp37-cp37m-manylinux2014_x86_64.whl (6.3MB) |████████████████████████████████| 6.3MB 6.4MB/s Requirement already satisfied, skipping upgrade: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.24-&gt;yfinance) (2018.9) Requirement already satisfied, skipping upgrade: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.24-&gt;yfinance) (2.8.1) Requirement already satisfied, skipping upgrade: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.20-&gt;yfinance) (2.10) Requirement already satisfied, skipping upgrade: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.20-&gt;yfinance) (2020.12.5) Requirement already satisfied, skipping upgrade: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.20-&gt;yfinance) (3.0.4) Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests&gt;=2.20-&gt;yfinance) (1.24.3) Requirement already satisfied, skipping upgrade: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas&gt;=0.24-&gt;yfinance) (1.15.0) Building wheels for collected packages: yfinance Building wheel for yfinance (setup.py) ... done Created wheel for yfinance: filename=yfinance-0.1.59-py2.py3-none-any.whl size=23442 sha256=519c6bb89355fc0fab0d0a1c7f12df703543e4aadbde996b33dcf9592621bb6e Stored in directory: /tmp/pip-ephem-wheel-cache-weglluyo/wheels/f8/2a/0f/4b5a86e1d52e451757eb6bc17fd899629f0925c777741b6d04 Successfully built yfinance Installing collected packages: lxml, yfinance Found existing installation: lxml 4.2.6 Uninstalling lxml-4.2.6: Successfully uninstalled lxml-4.2.6 Successfully installed lxml-4.6.3 yfinance-0.1.59 . import yfinance as yf tickers = [&#39;LKOH.ME&#39;,&#39;GMKN.ME&#39;, &#39;DSKY.ME&#39;, &#39;NKNC.ME&#39;, &#39;MTSS.ME&#39;, &#39;IRAO.ME&#39;, &#39;SBER.ME&#39;, &#39;AFLT.ME&#39;] df_stocks= yf.download(tickers, start=&#39;2018-01-01&#39;, end=&#39;2020-12-31&#39;)[&#39;Adj Close&#39;] . [*********************100%***********************] 8 of 8 completed . df_stocks.head() . AFLT.ME DSKY.ME GMKN.ME IRAO.ME LKOH.ME MTSS.ME NKNC.ME SBER.ME . Date . 2018-01-03 127.199066 | 70.177948 | 8249.352539 | 3.025520 | 2844.152100 | 197.995163 | 33.301483 | 145.441605 | . 2018-01-04 134.899857 | 71.621933 | 8455.913086 | 3.181567 | 2910.237305 | 202.738434 | 33.173889 | 149.769119 | . 2018-01-05 133.450317 | 71.621933 | 8441.316406 | 3.160166 | 2967.178467 | 202.199417 | 33.237682 | 149.643677 | . 2018-01-09 136.349426 | 71.116539 | 8521.605469 | 3.103989 | 3016.222900 | 203.421158 | 33.556660 | 150.772598 | . 2018-01-10 135.262268 | 71.658035 | 8507.006836 | 3.087939 | 3026.613525 | 204.427307 | 33.811848 | 149.116821 | . Дальше необходимо проверить есть ли среди полученных значений NaN. В случае их наличия они будут мешать дальнейшему исследованию. Для того, чтобы это решить, необходимо рассмотреть или иную акцию, или заменить их для примера средней ценой между днем до и после значения NaN. . nullin_df = pd.DataFrame(df_stocks,columns=tickers) print(nullin_df.isnull().sum()) . LKOH.ME 0 GMKN.ME 0 DSKY.ME 0 NKNC.ME 0 MTSS.ME 0 IRAO.ME 0 SBER.ME 0 AFLT.ME 0 dtype: int64 . 3. &#1056;&#1072;&#1089;&#1095;&#1077;&#1090;&#1099; . Перейдем к расчетам по оптимизации портфеля и начнем с определения ожидаемой доходности и дисперсии портфеля. Далее сохраним значения весов портфеля с максимальным коэффициентом Шарпа и минимальной диспрсией. . # mu = expected_returns.mean_historical_return(df_stocks) # #Sample Variance of Portfolio # Sigma = risk_models.sample_cov(df_stocks) # #Max Sharpe Ratio - Tangent to the EF # ef = EfficientFrontier(mu, Sigma, weight_bounds=(0,1)) #weight bounds in negative allows shorting of stocks # sharpe_pfolio=ef.max_sharpe() #May use add objective to ensure minimum zero weighting to individual stocks # sharpe_pwt=ef.clean_weights() # print(sharpe_pwt) #Годовая доходность mu = expected_returns.mean_historical_return(df_stocks) #Дисперсия портфеля Sigma = risk_models.sample_cov(df_stocks) . ef = EfficientFrontier(mu, Sigma, weight_bounds=(0,1)) #weight bounds in negative allows shorting of stocks sharpe_pfolio=ef.max_sharpe() #May use add objective to ensure minimum zero weighting to individual stocks sharpe_pwt=ef.clean_weights() print(sharpe_pwt) . OrderedDict([(&#39;AFLT.ME&#39;, 0.0), (&#39;DSKY.ME&#39;, 0.22606), (&#39;GMKN.ME&#39;, 0.48796), (&#39;IRAO.ME&#39;, 0.0), (&#39;LKOH.ME&#39;, 0.0), (&#39;MTSS.ME&#39;, 0.02953), (&#39;NKNC.ME&#39;, 0.25645), (&#39;SBER.ME&#39;, 0.0)]) . Необходимо обратить внимание, что если изменить weight_bounds=(0,1) на weight_bounds=(-1,1), то в портфеле будут учитываться и короткие позиции по акциям. . Дальше посмотрим общие характеристики по портфелю. . ef.portfolio_performance(verbose=True) . Expected annual return: 37.1% Annual volatility: 20.7% Sharpe Ratio: 1.70 . (0.37123023494063007, 0.20717177784552962, 1.695357536597058) . Теперь посмотрим портфель с минимальной волатильностью: . ef1 = EfficientFrontier(mu, Sigma, weight_bounds=(0,1)) #weight bounds in negative allows shorting of stocks minvol=ef1.min_volatility() minvol_pwt=ef1.clean_weights() print(minvol_pwt) . OrderedDict([(&#39;AFLT.ME&#39;, 0.02876), (&#39;DSKY.ME&#39;, 0.24503), (&#39;GMKN.ME&#39;, 0.10403), (&#39;IRAO.ME&#39;, 0.0938), (&#39;LKOH.ME&#39;, 0.01168), (&#39;MTSS.ME&#39;, 0.41967), (&#39;NKNC.ME&#39;, 0.09704), (&#39;SBER.ME&#39;, 0.0)]) . ef1.portfolio_performance(verbose=True, risk_free_rate = 0.27) . Expected annual return: 24.0% Annual volatility: 16.9% Sharpe Ratio: -0.18 . (0.239915644698749, 0.16885732511472468, -0.17816434839774456) . 4. &#1055;&#1086;&#1089;&#1090;&#1088;&#1086;&#1077;&#1085;&#1080;&#1077; &#1075;&#1088;&#1072;&#1092;&#1080;&#1082;&#1072; &#1101;&#1092;&#1092;&#1077;&#1082;&#1090;&#1080;&#1074;&#1085;&#1099;&#1093; &#1075;&#1088;&#1072;&#1085;&#1080;&#1094; . Заключительным шагом является построение эффективной границы для визуального представления и расчет распределения активов. Тут встречается одна сложность, решить которую пока что мне не удалось - пакет создан для анализа в долларах и в результате в выводе присутствует их обозначение. Но с другой стороны наличия значка &quot;$&quot; не должно сильно мешать. . Анализ произведем для суммы в 100 000 рублей. . cl_obj = CLA(mu, Sigma) ax = pplt.plot_efficient_frontier(cl_obj, showfig = False) ax.xaxis.set_major_formatter(FuncFormatter(lambda x, _: &#39;{:.0%}&#39;.format(x))) ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: &#39;{:.0%}&#39;.format(y))) . Первым этапом посчитаем портфель с минимальной волатильностью: . latest_prices = get_latest_prices(df_stocks) # Allocate Portfolio Value in $ as required to show number of shares/stocks to buy, also bounds for shorting will affect allocation #Min Volatility Portfolio Allocation $10000 allocation_minv, rem_minv = DiscreteAllocation(minvol_pwt, latest_prices, total_portfolio_value=100000).lp_portfolio() print(allocation_minv) print(&quot;Leftover Fund value in$ after building minimum volatility portfolio is ${:.2f}&quot;.format(rem_minv)) print(&quot;Осталось денежных средств после построения портфеля с минимальной волатильностью составляет {:.2f} рублей&quot;.format(rem_minv)) print() . {&#39;AFLT.ME&#39;: 41, &#39;DSKY.ME&#39;: 181, &#39;IRAO.ME&#39;: 1765, &#39;LKOH.ME&#39;: 1, &#39;MTSS.ME&#39;: 127, &#39;NKNC.ME&#39;: 107} Leftover Fund value in$ after building minimum volatility portfolio is $6152.03 Осталось денежных средств после построения портфеля с минимальной волатильностью составляет 6152.03 рублей . Вторым шагом портфель с максимальным коэффициентом Шарпа: . latest_prices1 = get_latest_prices(df_stocks) allocation_shp, rem_shp = DiscreteAllocation(sharpe_pwt, latest_prices1, total_portfolio_value=100000).lp_portfolio() print(allocation_shp) print(&quot;Leftover Fund value in$ after building Max Sharpe ratio portfolio is ${:.2f}&quot;.format(rem_shp)) print(&quot;Осталось денежных средств после построения портфеля с максимальным коэффициентом Шарпа {:.2f} рублей&quot;.format(rem_shp)) #allocation using integer programming via PyPortfolioOpt User Guide #Alex Putkov code used for guidance and reference in applying integer programming . {&#39;DSKY.ME&#39;: 167, &#39;GMKN.ME&#39;: 2, &#39;MTSS.ME&#39;: 9, &#39;NKNC.ME&#39;: 283} Leftover Fund value in$ after building Max Sharpe ratio portfolio is $1319.05 Осталось денежных средств после построения портфеля с максимальным коэффициентом Шарпа 1319.05 рублей . В результтате нам предлагается купить для оптимального портфеля 167 акций Детского мира, 2 акции Норильского никеля, 9 акций МТС и 283 акцию Нижнекамскнефтехим. В результате у нас еще останется 1319 рублей. .",
            "url": "https://zmey56.github.io/blog//russian/python/algotrading/portfolio/optimization/2021/05/16/automating-portfolio-optimization.html",
            "relUrl": "/russian/python/algotrading/portfolio/optimization/2021/05/16/automating-portfolio-optimization.html",
            "date": " • May 16, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Russian - Использование API Fmp Cloud для отбора акций по дивидендам на Nasdaq с помощью Python",
            "content": "&#1048;&#1089;&#1087;&#1086;&#1083;&#1100;&#1079;&#1086;&#1074;&#1072;&#1085;&#1080;&#1077; API Fmp Cloud &#1076;&#1083;&#1103; &#1086;&#1090;&#1073;&#1086;&#1088;&#1072; &#1072;&#1082;&#1094;&#1080;&#1081; &#1087;&#1086; &#1076;&#1080;&#1074;&#1080;&#1076;&#1077;&#1085;&#1076;&#1072;&#1084; &#1085;&#1072; Nasdaq &#1089; &#1087;&#1086;&#1084;&#1086;&#1097;&#1100;&#1102; Python . Акции с высокой дивидентной доходностью часто являются отличной инвестиционной стратегией для инвесторов, стремящихся получать приток денежных средств каждый год. В данной статье буден создан скрипт на Python для отбора их на бирже NASDAQ. . &#1063;&#1090;&#1086; &#1090;&#1072;&#1082;&#1086;&#1077; &#1076;&#1080;&#1074;&#1080;&#1076;&#1077;&#1085;&#1090;&#1085;&#1072;&#1103; &#1076;&#1086;&#1093;&#1086;&#1076;&#1085;&#1086;&#1089;&#1090;&#1100;? . Возьму определение из Википедии. Дивиде́ндная дохо́дность (англ. dividend yield) — это отношение величины годового дивиденда на акцию к цене акции. Данная величина выражается чаще всего в процентах. . Пример . При цене акции ОАО «Лукойл» 1124,37 рублей и дивиденде 28 рублей на акцию дивидендная доходность будет равна: . . Так же необходимо обратить внимание, что многие растущие компании, такие как для примера Amazon и Yandex, не выплачивают дивиденды, поскольку они реинвестируют всю прибыль в развитие бизнеса. Поэтому дивидендная доходность для этих фирм будет равна нулю. . &#1056;&#1072;&#1089;&#1095;&#1077;&#1090; &#1076;&#1080;&#1074;&#1080;&#1076;&#1077;&#1085;&#1076;&#1085;&#1086;&#1081; &#1076;&#1086;&#1093;&#1086;&#1076;&#1085;&#1086;&#1089;&#1090;&#1080; &#1089; &#1087;&#1086;&#1084;&#1086;&#1097;&#1100;&#1102; Python . Расчет дивидендной доходности является простой задачей, которую можно выполнить с помощью финансового API под названием fmpcloud и Python. Этот API предлагает несколько бесплатных запросов в день после регистрации. . Первым делом нужно извлечь список тикеров для всех акций, торгующихся на Nasdaq, по которым собираемся рассчитать дивидендную доходность. | import requests demo = &#39;39b9d9eeb3ba3fe57e039284db7ed2c0&#39; tickers = requests.get(f&#39;https://fmpcloud.io/api/v3/symbol/available-nasdaq?apikey={demo}&#39;) tickers = tickers.json() symbols = [] for ticker in tickers: symbols.append(ticker[&#39;symbol&#39;]) print(symbols) #[&#39;SMMCW&#39;, &#39;VOD&#39;, &#39;TRMD&#39;, &#39;TRMB&#39;, &#39;NBL&#39;, &#39;EMMA&#39;,...] . TypeError Traceback (most recent call last) &lt;ipython-input-25-1a9ccd9b857e&gt; in &lt;module&gt;() 8 symbols = [] 9 for ticker in tickers: &gt; 10 symbols.append(ticker[&#39;symbol&#39;]) 11 print(symbols) 12 #[&#39;SMMCW&#39;, &#39;VOD&#39;, &#39;TRMD&#39;, &#39;TRMB&#39;, &#39;NBL&#39;, &#39;EMMA&#39;,...] TypeError: string indices must be integers . companydata = requests.get(f&#39;https://fmpcloud.io/api/v3/profile/SMTA?apikey={demo}&#39;) companydata = companydata.json() . companydata . {&#39;Error Message&#39;: &#39;Limit Reach . Please upgrade your plan or visit our documentation for more details at https://fmpcloud.io/plans &#39;} . https://fmpcloud.io/api/v3/profile/AAPL?apikey=39b9d9eeb3ba3fe57e039284db7ed2c0 . File &#34;&lt;ipython-input-26-eff50d69cb6e&gt;&#34;, line 1 https://fmpcloud.io/api/v3/profile/AAPL?apikey=39b9d9eeb3ba3fe57e039284db7ed2c0 ^ SyntaxError: invalid syntax . len(symbols) . 5261 . &quot;TBK&quot; in symbols . False . После необходимо пройтись по полученому списку акций и получить финансовую информацию по компании. Так же необходимо понимать, что получаем только последние данные, а не за все время существование компании. | DivYield = {} for company in symbols: try: companydata = requests.get(f&#39;https://fmpcloud.io/api/v3/profile/{company}?apikey={demo}&#39;) companydata = companydata.json() latest_Annual_Dividend = companydata[0][&#39;lastDiv&#39;] price = companydata[0][&#39;price&#39;] market_Capitalization = companydata[0][&#39;mktCap&#39;] name = companydata[0][&#39;companyName&#39;] exchange = companydata[0][&#39;exchange&#39;] dividend_Yield= latest_Annual_Dividend/price DivYield[company] = {} DivYield[company][&#39;Dividend_Yield&#39;] = dividend_Yield DivYield[company][&#39;latest_Price&#39;] = price DivYield[company][&#39;latest_Dividend&#39;] = latest_Annual_Dividend DivYield[company][&#39;market_Capit_in_M&#39;] = market_Capitalization/1000000 DivYield[company][&#39;company_Name&#39;] = name DivYield[company][&#39;exchange&#39;] = exchange except: pass print(DivYield) . {&#39;ATEN&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 9.25, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 712.34336, &#39;company_Name&#39;: &#39;A10 Networks Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ABM&#39;: {&#39;Dividend_Yield&#39;: 0.01836213668499607, &#39;latest_Price&#39;: 50.92, &#39;latest_Dividend&#39;: 0.935, &#39;market_Capit_in_M&#39;: 3416.20736, &#39;company_Name&#39;: &#39;ABM Industries Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;EMD&#39;: {&#39;Dividend_Yield&#39;: 0.0870722433460076, &#39;latest_Price&#39;: 13.15, &#39;latest_Dividend&#39;: 1.145, &#39;market_Capit_in_M&#39;: 798.80986, &#39;company_Name&#39;: &#39;Western Asset Emerging Markets Debt Fund Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;NM-PG&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 12.2, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 77.285168, &#39;company_Name&#39;: &#39;Navios Maritime Holdings Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ARCH&#39;: {&#39;Dividend_Yield&#39;: 0.01232134056185313, &#39;latest_Price&#39;: 40.58, &#39;latest_Dividend&#39;: 0.5, &#39;market_Capit_in_M&#39;: 621.55981, &#39;company_Name&#39;: &#39;Arch Resources Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CPL&#39;: {&#39;Dividend_Yield&#39;: 0.013637500000000002, &#39;latest_Price&#39;: 17.36, &#39;latest_Dividend&#39;: 0.236747, &#39;market_Capit_in_M&#39;: 10258.0419, &#39;company_Name&#39;: &#39;CPFL Energia S.A. American Depositary Shares&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MFGP&#39;: {&#39;Dividend_Yield&#39;: 0.09148698884758365, &#39;latest_Price&#39;: 8.07, &#39;latest_Dividend&#39;: 0.7383000000000001, &#39;market_Capit_in_M&#39;: 2676.69786, &#39;company_Name&#39;: &#39;Micro Focus Intl PLC ADS each representing One Ord Sh&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;FMO&#39;: {&#39;Dividend_Yield&#39;: 0.09384775808133473, &#39;latest_Price&#39;: 9.59, &#39;latest_Dividend&#39;: 0.9, &#39;market_Capit_in_M&#39;: 67.97536, &#39;company_Name&#39;: &#39;Fiduciary/Claymore Energy Infrastructure Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BEN&#39;: {&#39;Dividend_Yield&#39;: 0.04672578444747613, &#39;latest_Price&#39;: 29.32, &#39;latest_Dividend&#39;: 1.37, &#39;market_Capit_in_M&#39;: 14818.4453, &#39;company_Name&#39;: &#39;Franklin Resources Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;A&#39;: {&#39;Dividend_Yield&#39;: 0.00744126373185791, &#39;latest_Price&#39;: 124.71, &#39;latest_Dividend&#39;: 0.9279999999999999, &#39;market_Capit_in_M&#39;: 37998.887, &#39;company_Name&#39;: &#39;Agilent Technologies Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BCX&#39;: {&#39;Dividend_Yield&#39;: 0.05553047404063205, &#39;latest_Price&#39;: 8.86, &#39;latest_Dividend&#39;: 0.49199999999999994, &#39;market_Capit_in_M&#39;: 782.47974, &#39;company_Name&#39;: &#39;BlackRock Resources and Commodities Strategy Trust&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MOON&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 37.89, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Direxion Moonshot Innovators ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;AMTR&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 34.6748, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;ETRACS Alerian Midstream Energy Total Return Index ETN&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;ACI&#39;: {&#39;Dividend_Yield&#39;: 0.010070493454179255, &#39;latest_Price&#39;: 19.86, &#39;latest_Dividend&#39;: 0.2, &#39;market_Capit_in_M&#39;: 9245.4851, &#39;company_Name&#39;: &#39;Albertsons Companies, Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ET&#39;: {&#39;Dividend_Yield&#39;: 0.11878517519516558, &#39;latest_Price&#39;: 7.7114, &#39;latest_Dividend&#39;: 0.9159999999999999, &#39;market_Capit_in_M&#39;: 20847.6938, &#39;company_Name&#39;: &#39;Energy Transfer LP&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SID&#39;: {&#39;Dividend_Yield&#39;: 0.00031323414252153485, &#39;latest_Price&#39;: 6.385, &#39;latest_Dividend&#39;: 0.002, &#39;market_Capit_in_M&#39;: 8908.6075, &#39;company_Name&#39;: &#39;Companhia Siderúrgica Nacional&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JNPR&#39;: {&#39;Dividend_Yield&#39;: 0.03154574132492114, &#39;latest_Price&#39;: 25.36, &#39;latest_Dividend&#39;: 0.8, &#39;market_Capit_in_M&#39;: 8322.4422, &#39;company_Name&#39;: &#39;Juniper Networks Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;FN&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 88.55, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 3264.90061, &#39;company_Name&#39;: &#39;Fabrinet&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ICL&#39;: {&#39;Dividend_Yield&#39;: 0.03030508819884212, &#39;latest_Price&#39;: 5.8901, &#39;latest_Dividend&#39;: 0.1785, &#39;market_Capit_in_M&#39;: 7426.0029, &#39;company_Name&#39;: &#39;Icl Group Ltd&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;IR&#39;: {&#39;Dividend_Yield&#39;: 0.01056934888822415, &#39;latest_Price&#39;: 50.145, &#39;latest_Dividend&#39;: 0.53, &#39;market_Capit_in_M&#39;: 20998.9714, &#39;company_Name&#39;: &#39;Ingersoll Rand Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;HT&#39;: {&#39;Dividend_Yield&#39;: 0.025442980463425715, &#39;latest_Price&#39;: 11.005, &#39;latest_Dividend&#39;: 0.28, &#39;market_Capit_in_M&#39;: 427.472736, &#39;company_Name&#39;: &#39;Hersha Hospitality Trust&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;DFIN&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 27.59, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 918.56218, &#39;company_Name&#39;: &#39;Donnelley Financial Solutions Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BLK&#39;: {&#39;Dividend_Yield&#39;: 0.019933113918675017, &#39;latest_Price&#39;: 753.52, &#39;latest_Dividend&#39;: 15.02, &#39;market_Capit_in_M&#39;: 115012.772, &#39;company_Name&#39;: &#39;BlackRock Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;FSD&#39;: {&#39;Dividend_Yield&#39;: 0.08770822397491015, &#39;latest_Price&#39;: 15.0499, &#39;latest_Dividend&#39;: 1.3200000000000003, &#39;market_Capit_in_M&#39;: 503.721664, &#39;company_Name&#39;: &#39;First Trust High Income Long/Short Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;HCXZ&#39;: {&#39;Dividend_Yield&#39;: 0.05181674565560822, &#39;latest_Price&#39;: 25.32, &#39;latest_Dividend&#39;: 1.312, &#39;market_Capit_in_M&#39;: 1318.60224, &#39;company_Name&#39;: &#39;Hercules Capital, Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;HCXY&#39;: {&#39;Dividend_Yield&#39;: 0.05792592592592593, &#39;latest_Price&#39;: 27.0, &#39;latest_Dividend&#39;: 1.564, &#39;market_Capit_in_M&#39;: 1425.59731, &#39;company_Name&#39;: &#39;Hercules Capital, Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ACTV&#39;: {&#39;Dividend_Yield&#39;: 0.0009788758589635664, &#39;latest_Price&#39;: 35.7553, &#39;latest_Dividend&#39;: 0.035, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;LeaderShares Activist Leaders ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;MDLX&#39;: {&#39;Dividend_Yield&#39;: 0.7320394960844399, &#39;latest_Price&#39;: 2.3496, &#39;latest_Dividend&#39;: 1.72, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Medley LLC 6.875% Senior Notes due 2026&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BMA&#39;: {&#39;Dividend_Yield&#39;: 0.16821241585639493, &#39;latest_Price&#39;: 13.37, &#39;latest_Dividend&#39;: 2.249, &#39;market_Capit_in_M&#39;: 1366.80166, &#39;company_Name&#39;: &#39;Banco Macro S.A. ADR (representing Ten Class B)&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;EROS&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 2.56, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 453.83168, &#39;company_Name&#39;: &#39;Eros International PLC&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;USA&#39;: {&#39;Dividend_Yield&#39;: 0.08569545154911008, &#39;latest_Price&#39;: 7.585, &#39;latest_Dividend&#39;: 0.65, &#39;market_Capit_in_M&#39;: 1646.64282, &#39;company_Name&#39;: &#39;Liberty All-Star Equity Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;KT&#39;: {&#39;Dividend_Yield&#39;: 0.03662496909765142, &#39;latest_Price&#39;: 12.135, &#39;latest_Dividend&#39;: 0.444444, &#39;market_Capit_in_M&#39;: 5782.3642, &#39;company_Name&#39;: &#39;KT Corporation&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MDLQ&#39;: {&#39;Dividend_Yield&#39;: 0.7199203187250998, &#39;latest_Price&#39;: 2.51, &#39;latest_Dividend&#39;: 1.8070000000000002, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Medley LLC 7.25% Notes due 2024&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;STZ.B&#39;: {&#39;Dividend_Yield&#39;: 0.0794392523364486, &#39;latest_Price&#39;: 8.56, &#39;latest_Dividend&#39;: 0.68, &#39;market_Capit_in_M&#39;: 1148.91482, &#39;company_Name&#39;: &#39;Constellation Brands, Inc&#39;, &#39;exchange&#39;: &#39;YHD&#39;}, &#39;MCV&#39;: {&#39;Dividend_Yield&#39;: 0.046052104208416836, &#39;latest_Price&#39;: 24.95, &#39;latest_Dividend&#39;: 1.149, &#39;market_Capit_in_M&#39;: 1359.13139, &#39;company_Name&#39;: &#39;Medley Capital Corporation 6.125% Senior Notes due 2023&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;KBH&#39;: {&#39;Dividend_Yield&#39;: 0.01052400789300592, &#39;latest_Price&#39;: 45.61, &#39;latest_Dividend&#39;: 0.48, &#39;market_Capit_in_M&#39;: 4508.5809, &#39;company_Name&#39;: &#39;KB Home&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;AAN&#39;: {&#39;Dividend_Yield&#39;: 0.008978451715881885, &#39;latest_Price&#39;: 25.06, &#39;latest_Dividend&#39;: 0.22500000000000003, &#39;market_Capit_in_M&#39;: 857.17478, &#39;company_Name&#39;: &#34;Aaron&#39;s Inc&#34;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;IQV&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 190.87, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 36602.569, &#39;company_Name&#39;: &#39;IQVIA Holdings Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;KEG&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 104.14, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 35159.642, &#39;company_Name&#39;: &#39;Key Energy Services Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;KEM&#39;: {&#39;Dividend_Yield&#39;: 0.00735023888276369, &#39;latest_Price&#39;: 27.21, &#39;latest_Dividend&#39;: 0.2, &#39;market_Capit_in_M&#39;: 1592.01357, &#39;company_Name&#39;: &#39;KEMET Corporation&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;WYND&#39;: {&#39;Dividend_Yield&#39;: 0.027053140096618356, &#39;latest_Price&#39;: 51.75, &#39;latest_Dividend&#39;: 1.4, &#39;market_Capit_in_M&#39;: 4443.3219, &#39;company_Name&#39;: &#39;Wyndham Destinations Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CLPR&#39;: {&#39;Dividend_Yield&#39;: 0.04804045512010114, &#39;latest_Price&#39;: 7.91, &#39;latest_Dividend&#39;: 0.38, &#39;market_Capit_in_M&#39;: 127.059912, &#39;company_Name&#39;: &#39;Clipper Realty Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MZA&#39;: {&#39;Dividend_Yield&#39;: 0.04249311294765841, &#39;latest_Price&#39;: 14.52, &#39;latest_Dividend&#39;: 0.6170000000000001, &#39;market_Capit_in_M&#39;: 67.338536, &#39;company_Name&#39;: &#39;Blackrock Muniyield Arizona Fund Inc&#39;, &#39;exchange&#39;: &#39;NYSE American&#39;}, &#39;ACA&#39;: {&#39;Dividend_Yield&#39;: 0.0031883434164693882, &#39;latest_Price&#39;: 62.7285, &#39;latest_Dividend&#39;: 0.2, &#39;market_Capit_in_M&#39;: 3021.93306, &#39;company_Name&#39;: &#39;Arcosa Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TIF&#39;: {&#39;Dividend_Yield&#39;: 0.015664386028087864, &#39;latest_Price&#39;: 111.08, &#39;latest_Dividend&#39;: 1.7399999999999998, &#39;market_Capit_in_M&#39;: 116379.902, &#39;company_Name&#39;: &#39;Tiffany &amp; Co&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;RRTS&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 5.475, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 207.461984, &#39;company_Name&#39;: &#39;Roadrunner Transportation Systems Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GNL&#39;: {&#39;Dividend_Yield&#39;: 0.08712129462243809, &#39;latest_Price&#39;: 18.3652, &#39;latest_Dividend&#39;: 1.6, &#39;market_Capit_in_M&#39;: 1663.41875, &#39;company_Name&#39;: &#39;Global Net Lease Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BF.B&#39;: {&#39;Dividend_Yield&#39;: 0.03376635967038294, &#39;latest_Price&#39;: 10.315, &#39;latest_Dividend&#39;: 0.3483, &#39;market_Capit_in_M&#39;: 94.31324, &#39;company_Name&#39;: &#39;Brown-Forman Corp&#39;, &#39;exchange&#39;: &#39;YHD&#39;}, &#39;ESBA&#39;: {&#39;Dividend_Yield&#39;: 0.009400179051029543, &#39;latest_Price&#39;: 11.17, &#39;latest_Dividend&#39;: 0.105, &#39;market_Capit_in_M&#39;: 3149.66093, &#39;company_Name&#39;: &#39;Empire State Realty OP LP&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;NEWM&#39;: {&#39;Dividend_Yield&#39;: 0.06493506493506493, &#39;latest_Price&#39;: 29.26, &#39;latest_Dividend&#39;: 1.9, &#39;market_Capit_in_M&#39;: 7005.6346, &#39;company_Name&#39;: &#39;New Media Investment Group Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GDI&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 32.79, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 6728.9016, &#39;company_Name&#39;: &#39;Gardner Denver Holdings Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;EAB&#39;: {&#39;Dividend_Yield&#39;: 0.02450278440731901, &#39;latest_Price&#39;: 25.14, &#39;latest_Dividend&#39;: 0.616, &#39;market_Capit_in_M&#39;: 1181.08224, &#39;company_Name&#39;: &#39;Entergy Arkansas Inc. First Mortgage Bonds 4.90% Series Due December 1 2052&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;EAE&#39;: {&#39;Dividend_Yield&#39;: 0.023756466374850776, &#39;latest_Price&#39;: 25.13, &#39;latest_Dividend&#39;: 0.597, &#39;market_Capit_in_M&#39;: 1180.61235, &#39;company_Name&#39;: &#39;Entergy Arkansas Inc. First Mortgage Bonds 4.75% Series due June 1 2063&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;VCV&#39;: {&#39;Dividend_Yield&#39;: 0.04409199048374306, &#39;latest_Price&#39;: 12.61, &#39;latest_Dividend&#39;: 0.5559999999999999, &#39;market_Capit_in_M&#39;: 603.58144, &#39;company_Name&#39;: &#39;Invesco California Value Municipal Income Trust&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CXO&#39;: {&#39;Dividend_Yield&#39;: 0.009146341463414637, &#39;latest_Price&#39;: 65.6, &#39;latest_Dividend&#39;: 0.6000000000000001, &#39;market_Capit_in_M&#39;: 12876.9526, &#39;company_Name&#39;: &#39;Concho Resources Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MOSC&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 9.9, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 426.937472, &#39;company_Name&#39;: &#39;Mosaic Acquisition Corp. Class A&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PRI&#39;: {&#39;Dividend_Yield&#39;: 0.011253369272237196, &#39;latest_Price&#39;: 148.4, &#39;latest_Dividend&#39;: 1.67, &#39;market_Capit_in_M&#39;: 5865.8063, &#39;company_Name&#39;: &#39;Primerica Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CBX&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 2.7, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;CBX&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;AWK&#39;: {&#39;Dividend_Yield&#39;: 0.015019115237575098, &#39;latest_Price&#39;: 146.48, &#39;latest_Dividend&#39;: 2.2, &#39;market_Capit_in_M&#39;: 26577.1848, &#39;company_Name&#39;: &#39;American Water Works Company Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GIG&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 11.15, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 129.746968, &#39;company_Name&#39;: &#39;GigCapital Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;IRET&#39;: {&#39;Dividend_Yield&#39;: 0.03976143141153081, &#39;latest_Price&#39;: 70.42, &#39;latest_Dividend&#39;: 2.8, &#39;market_Capit_in_M&#39;: 913.76288, &#39;company_Name&#39;: &#39;Investors Real Estate Trust&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TNP&#39;: {&#39;Dividend_Yield&#39;: 0.021052631578947368, &#39;latest_Price&#39;: 9.5, &#39;latest_Dividend&#39;: 0.2, &#39;market_Capit_in_M&#39;: 178.419504, &#39;company_Name&#39;: &#39;Tsakos Energy Navigation Ltd&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;IF&#39;: {&#39;Dividend_Yield&#39;: 0.009287343532684284, &#39;latest_Price&#39;: 7.19, &#39;latest_Dividend&#39;: 0.066776, &#39;market_Capit_in_M&#39;: 381.07, &#39;company_Name&#39;: &#39;Aberdeen Indonesia Fund Inc. (Common Stock&#39;, &#39;exchange&#39;: &#39;NYSE American&#39;}, &#39;CRK&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 5.64, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1310.79808, &#39;company_Name&#39;: &#39;Comstock Resources Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ICAN&#39;: {&#39;Dividend_Yield&#39;: 0.015962213796735125, &#39;latest_Price&#39;: 28.485, &#39;latest_Dividend&#39;: 0.45468366, &#39;market_Capit_in_M&#39;: 4.27275, &#39;company_Name&#39;: &#39;SerenityShares Impact&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;GNC&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 6.27, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 6985.0936, &#39;company_Name&#39;: &#39;GNC Holdings Inc. Class A&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ISG&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 24.85, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 96534.79, &#39;company_Name&#39;: &#39;ING Group N.V. Perpetual Dent Secs 6.125%&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;FTK&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 1.8, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 130.586944, &#39;company_Name&#39;: &#39;Flotek Industries Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;AJXA&#39;: {&#39;Dividend_Yield&#39;: 0.07020534676481985, &#39;latest_Price&#39;: 25.81, &#39;latest_Dividend&#39;: 1.812, &#39;market_Capit_in_M&#39;: 459.0, &#39;company_Name&#39;: &#39;Great Ajax Corp. 7.25% Convertible Senior Notes due 2024&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GSH&#39;: {&#39;Dividend_Yield&#39;: 0.04602829162132753, &#39;latest_Price&#39;: 9.19, &#39;latest_Dividend&#39;: 0.423, &#39;market_Capit_in_M&#39;: 2217.68474, &#39;company_Name&#39;: &#39;Guangshen Railway Company Limited&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;DPZ&#39;: {&#39;Dividend_Yield&#39;: 0.008940618483638396, &#39;latest_Price&#39;: 366.865, &#39;latest_Dividend&#39;: 3.2800000000000002, &#39;market_Capit_in_M&#39;: 14234.5083, &#39;company_Name&#39;: &#34;Domino&#39;s Pizza Inc&#34;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;KN&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 20.6, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1909.48403, &#39;company_Name&#39;: &#39;Knowles Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;KW&#39;: {&#39;Dividend_Yield&#39;: 0.0537109375, &#39;latest_Price&#39;: 20.48, &#39;latest_Dividend&#39;: 1.1, &#39;market_Capit_in_M&#39;: 2889.40032, &#39;company_Name&#39;: &#39;Kennedy-Wilson Holdings Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CURO&#39;: {&#39;Dividend_Yield&#39;: 0.014656895403064625, &#39;latest_Price&#39;: 15.01, &#39;latest_Dividend&#39;: 0.22, &#39;market_Capit_in_M&#39;: 623.41331, &#39;company_Name&#39;: &#39;CURO Group Holdings Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JMEI&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 19.93, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 227.594624, &#39;company_Name&#39;: &#39;Jumei International Holding Limited American Depositary Shares each representing one Class A&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ERA&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 5.16, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 111.071064, &#39;company_Name&#39;: &#39;Era Group Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;AA&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 32.93, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 6135.5505, &#39;company_Name&#39;: &#39;Alcoa Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GWR&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 111.88, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 6381.6013, &#39;company_Name&#39;: &#39;Genesee &amp; Wyoming Inc. Class A&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;WMS&#39;: {&#39;Dividend_Yield&#39;: 0.0036409608091024018, &#39;latest_Price&#39;: 98.875, &#39;latest_Dividend&#39;: 0.36, &#39;market_Capit_in_M&#39;: 7008.0031, &#39;company_Name&#39;: &#39;Advanced Drainage Systems Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TLDH&#39;: {&#39;Dividend_Yield&#39;: 0.07878613133424638, &#39;latest_Price&#39;: 27.746, &#39;latest_Dividend&#39;: 2.186, &#39;market_Capit_in_M&#39;: 8.363848, &#39;company_Name&#39;: &#39;FlexShares Currency Hedged Morningstar DM ex-US Factor Tilt Index Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;SAND&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 6.655, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1301.51834, &#39;company_Name&#39;: &#39;Sandstorm Gold Ltd&#39;, &#39;exchange&#39;: &#39;NYSE American&#39;}, &#39;BK&#39;: {&#39;Dividend_Yield&#39;: 0.025941422594142262, &#39;latest_Price&#39;: 47.8, &#39;latest_Dividend&#39;: 1.24, &#39;market_Capit_in_M&#39;: 41918.255, &#39;company_Name&#39;: &#39;Bank of New York Mellon Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;DWIN&#39;: {&#39;Dividend_Yield&#39;: 0.001132852729145211, &#39;latest_Price&#39;: 9.71, &#39;latest_Dividend&#39;: 0.011, &#39;market_Capit_in_M&#39;: 250.409248, &#39;company_Name&#39;: &#39;PowerShares DWA Tactical Multi-Asset Income Portfolio&#39;, &#39;exchange&#39;: &#39;Nasdaq Global Market&#39;}, &#39;T&#39;: {&#39;Dividend_Yield&#39;: 0.06797385620915032, &#39;latest_Price&#39;: 30.6, &#39;latest_Dividend&#39;: 2.08, &#39;market_Capit_in_M&#39;: 218436.878, &#39;company_Name&#39;: &#39;AT&amp;T Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;V&#39;: {&#39;Dividend_Yield&#39;: 0.005838591204444863, &#39;latest_Price&#39;: 212.38, &#39;latest_Dividend&#39;: 1.24, &#39;market_Capit_in_M&#39;: 468266.025, &#39;company_Name&#39;: &#39;Visa Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;DNB&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 24.045, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 10325.8614, &#39;company_Name&#39;: &#39;Dun &amp; Bradstreet Holdings Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ATHM&#39;: {&#39;Dividend_Yield&#39;: 0.01699129714048902, &#39;latest_Price&#39;: 96.52, &#39;latest_Dividend&#39;: 1.6400000000000001, &#39;market_Capit_in_M&#39;: 12063.0692, &#39;company_Name&#39;: &#39;Autohome Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MIXT&#39;: {&#39;Dividend_Yield&#39;: 0.018317612161661105, &#39;latest_Price&#39;: 13.485, &#39;latest_Dividend&#39;: 0.24701299999999998, &#39;market_Capit_in_M&#39;: 297.012512, &#39;company_Name&#39;: &#39;MiX Telematics Limited American Depositary Shares each representing 25&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ARDC&#39;: {&#39;Dividend_Yield&#39;: 0.07846381723802025, &#39;latest_Price&#39;: 14.9878, &#39;latest_Dividend&#39;: 1.176, &#39;market_Capit_in_M&#39;: 343.443936, &#39;company_Name&#39;: &#39;Ares Dynamic Credit Allocation Fund Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ED&#39;: {&#39;Dividend_Yield&#39;: 0.04135237068965518, &#39;latest_Price&#39;: 74.24, &#39;latest_Dividend&#39;: 3.0700000000000003, &#39;market_Capit_in_M&#39;: 25421.1871, &#39;company_Name&#39;: &#39;Consolidated Edison Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CHSP&#39;: {&#39;Dividend_Yield&#39;: 0.0562390158172232, &#39;latest_Price&#39;: 28.45, &#39;latest_Dividend&#39;: 1.6, &#39;market_Capit_in_M&#39;: 1718.203353, &#39;company_Name&#39;: &#39;Chesapeake Lodging Trust of Beneficial Interest&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JAG&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 8.23, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1756.45466, &#39;company_Name&#39;: &#39;Jagged Peak Energy Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SLB&#39;: {&#39;Dividend_Yield&#39;: 0.018188432157148056, &#39;latest_Price&#39;: 27.49, &#39;latest_Dividend&#39;: 0.5, &#39;market_Capit_in_M&#39;: 38438.441, &#39;company_Name&#39;: &#39;Schlumberger NV&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;DOV&#39;: {&#39;Dividend_Yield&#39;: 0.014314706095528013, &#39;latest_Price&#39;: 137.97, &#39;latest_Dividend&#39;: 1.9749999999999999, &#39;market_Capit_in_M&#39;: 19847.9503, &#39;company_Name&#39;: &#39;Dover Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;INSI&#39;: {&#39;Dividend_Yield&#39;: 0.0629936616284739, &#39;latest_Price&#39;: 20.51, &#39;latest_Dividend&#39;: 1.2919999999999998, &#39;market_Capit_in_M&#39;: 216.98144, &#39;company_Name&#39;: &#39;Insight Select Income Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CRS&#39;: {&#39;Dividend_Yield&#39;: 0.019138755980861247, &#39;latest_Price&#39;: 41.8, &#39;latest_Dividend&#39;: 0.8, &#39;market_Capit_in_M&#39;: 2007.48672, &#39;company_Name&#39;: &#39;Carpenter Technology Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;INST&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 49.0, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1874.89677, &#39;company_Name&#39;: &#39;Instructure Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JEC&#39;: {&#39;Dividend_Yield&#39;: 0.007921714818266543, &#39;latest_Price&#39;: 85.84, &#39;latest_Dividend&#39;: 0.68, &#39;market_Capit_in_M&#39;: 11438.0933, &#39;company_Name&#39;: &#39;Jacobs Engineering Group Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MCRN&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 16.8, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1184.3159, &#39;company_Name&#39;: &#39;Milacron Holdings Corp.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;FELP&#39;: {&#39;Dividend_Yield&#39;: 1.5170670037926675, &#39;latest_Price&#39;: 0.1582, &#39;latest_Dividend&#39;: 0.24, &#39;market_Capit_in_M&#39;: 23.08043, &#39;company_Name&#39;: &#39;Foresight Energy LP representing Limited Partner Interests&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GLL&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 38.99, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 21.649623, &#39;company_Name&#39;: &#39;ProShares UltraShort Gold&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;HCP&#39;: {&#39;Dividend_Yield&#39;: 0.046879949318973706, &#39;latest_Price&#39;: 31.57, &#39;latest_Dividend&#39;: 1.48, &#39;market_Capit_in_M&#39;: 15089.9231, &#39;company_Name&#39;: &#39;HCP Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;HCR&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 0.1523, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 15.211129, &#39;company_Name&#39;: &#39;Hi-Crush Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JHS&#39;: {&#39;Dividend_Yield&#39;: 0.05845951283739302, &#39;latest_Price&#39;: 15.19, &#39;latest_Dividend&#39;: 0.888, &#39;market_Capit_in_M&#39;: 176.911856, &#39;company_Name&#39;: &#39;John Hancock Income Securities Trust&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;IRM&#39;: {&#39;Dividend_Yield&#39;: 0.06629183400267737, &#39;latest_Price&#39;: 37.35, &#39;latest_Dividend&#39;: 2.476, &#39;market_Capit_in_M&#39;: 10772.524, &#39;company_Name&#39;: &#39;Iron Mountain Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CDAY&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 81.39, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 12112.0532, &#39;company_Name&#39;: &#39;Ceridian HCM Holding Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;NUW&#39;: {&#39;Dividend_Yield&#39;: 0.028641370869033043, &#39;latest_Price&#39;: 16.34, &#39;latest_Dividend&#39;: 0.4679999999999999, &#39;market_Capit_in_M&#39;: 253.299408, &#39;company_Name&#39;: &#39;Nuveen Amt-Free Municipal Value Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ZTS&#39;: {&#39;Dividend_Yield&#39;: 0.005401626842907982, &#39;latest_Price&#39;: 157.36, &#39;latest_Dividend&#39;: 0.8500000000000001, &#39;market_Capit_in_M&#39;: 74796.04, &#39;company_Name&#39;: &#39;Zoetis Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;LOR&#39;: {&#39;Dividend_Yield&#39;: 0.0754132231404959, &#39;latest_Price&#39;: 9.68, &#39;latest_Dividend&#39;: 0.7300000000000002, &#39;market_Capit_in_M&#39;: 66.600144, &#39;company_Name&#39;: &#39;Lazard World Dividend &amp; Income Fund Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;KWR&#39;: {&#39;Dividend_Yield&#39;: 0.0065504933865211, &#39;latest_Price&#39;: 238.15, &#39;latest_Dividend&#39;: 1.56, &#39;market_Capit_in_M&#39;: 4251.85843, &#39;company_Name&#39;: &#39;Quaker Chemical Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BIT&#39;: {&#39;Dividend_Yield&#39;: 0.08336227856894758, &#39;latest_Price&#39;: 17.8498, &#39;latest_Dividend&#39;: 1.4880000000000004, &#39;market_Capit_in_M&#39;: 670.03866, &#39;company_Name&#39;: &#39;Blackrock Multi-Sector Income Trust&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SNX&#39;: {&#39;Dividend_Yield&#39;: 0.001751574227336819, &#39;latest_Price&#39;: 114.183, &#39;latest_Dividend&#39;: 0.2, &#39;market_Capit_in_M&#39;: 5846.1148, &#39;company_Name&#39;: &#39;SYNNEX Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SRI&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 32.3, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 872.27117, &#39;company_Name&#39;: &#39;Stoneridge Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SLDA&#39;: {&#39;Dividend_Yield&#39;: 0.06710122699386503, &#39;latest_Price&#39;: 26.08, &#39;latest_Dividend&#39;: 1.75, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Sutherland Asset Management Corporation 7.00% Convertible Senior Notes due 2023&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TGI&#39;: {&#39;Dividend_Yield&#39;: 0.002185792349726776, &#39;latest_Price&#39;: 18.3, &#39;latest_Dividend&#39;: 0.04, &#39;market_Capit_in_M&#39;: 1006.10285, &#39;company_Name&#39;: &#39;Triumph Group Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GHLD&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 14.565, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 873.89997, &#39;company_Name&#39;: &#39;Guild Holdings Company&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;HIG-PG&#39;: {&#39;Dividend_Yield&#39;: 0.0539568345323741, &#39;latest_Price&#39;: 27.8, &#39;latest_Dividend&#39;: 1.5, &#39;market_Capit_in_M&#39;: 20651.2026, &#39;company_Name&#39;: &#39;The Hartford Financial Services Group, Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GPI&#39;: {&#39;Dividend_Yield&#39;: 0.0038625930030077565, &#39;latest_Price&#39;: 157.925, &#39;latest_Dividend&#39;: 0.61, &#39;market_Capit_in_M&#39;: 2857.76358, &#39;company_Name&#39;: &#39;Group 1 Automotive Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ELJ&#39;: {&#39;Dividend_Yield&#39;: 0.025969529085872578, &#39;latest_Price&#39;: 25.27, &#39;latest_Dividend&#39;: 0.65625, &#39;market_Capit_in_M&#39;: 178.36, &#39;company_Name&#39;: &#39;Entergy Louisiana LLC&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;WLH&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 24.37, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 945.03936, &#39;company_Name&#39;: &#39;Lyon William Homes (Class A)&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;HOS&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 0.2998, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 11.390392, &#39;company_Name&#39;: &#39;Hornbeck Offshore Services&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;I&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 0.3826, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 54.362104, &#39;company_Name&#39;: &#39;Intelsat S.A.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;GSX&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 34.475, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 8227.3203, &#39;company_Name&#39;: &#39;GSX Techedu Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ZAYO&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 34.99, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 8321.2877, &#39;company_Name&#39;: &#39;Zayo Group Holdings Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PACD&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 0.229, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 17.221578, &#39;company_Name&#39;: &#39;Pacific Drilling SA&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;VPC&#39;: {&#39;Dividend_Yield&#39;: 0.08784246575342466, &#39;latest_Price&#39;: 23.36, &#39;latest_Dividend&#39;: 2.052, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Virtus Private Credit ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;LXU&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 4.85, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 145.682848, &#39;company_Name&#39;: &#39;LSB Industries Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;AGRO&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 8.0, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 938.376, &#39;company_Name&#39;: &#39;Adecoagro SA&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BAP&#39;: {&#39;Dividend_Yield&#39;: 0.28144338869949953, &#39;latest_Price&#39;: 137.87, &#39;latest_Dividend&#39;: 38.8026, &#39;market_Capit_in_M&#39;: 10996.7186, &#39;company_Name&#39;: &#39;Credicorp Ltd&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;AMC&#39;: {&#39;Dividend_Yield&#39;: 0.0029850746268656712, &#39;latest_Price&#39;: 10.05, &#39;latest_Dividend&#39;: 0.03, &#39;market_Capit_in_M&#39;: 5044.6275, &#39;company_Name&#39;: &#39;AMC Entertainment Holdings Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;FLOW&#39;: {&#39;Dividend_Yield&#39;: 0.0013736263736263737, &#39;latest_Price&#39;: 65.52, &#39;latest_Dividend&#39;: 0.09, &#39;market_Capit_in_M&#39;: 2761.62867, &#39;company_Name&#39;: &#39;SPX FLOW Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PHM&#39;: {&#39;Dividend_Yield&#39;: 0.010044427274483292, &#39;latest_Price&#39;: 51.77, &#39;latest_Dividend&#39;: 0.52, &#39;market_Capit_in_M&#39;: 13691.9224, &#39;company_Name&#39;: &#39;Pultegroup Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SRL&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 8.6299, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 108.346672, &#39;company_Name&#39;: &#39;Scully Royalty Ltd&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;OKE&#39;: {&#39;Dividend_Yield&#39;: 0.0745911447945752, &#39;latest_Price&#39;: 50.14, &#39;latest_Dividend&#39;: 3.74, &#39;market_Capit_in_M&#39;: 22311.4977, &#39;company_Name&#39;: &#39;ONEOK Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;RCL&#39;: {&#39;Dividend_Yield&#39;: 0.009199198018634273, &#39;latest_Price&#39;: 84.79, &#39;latest_Dividend&#39;: 0.78, &#39;market_Capit_in_M&#39;: 21584.0584, &#39;company_Name&#39;: &#39;Royal Caribbean Cruises Ltd&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TEX&#39;: {&#39;Dividend_Yield&#39;: 0.0025895554596460937, &#39;latest_Price&#39;: 46.34, &#39;latest_Dividend&#39;: 0.12, &#39;market_Capit_in_M&#39;: 3231.13549, &#39;company_Name&#39;: &#39;Terex Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TSU&#39;: {&#39;Dividend_Yield&#39;: 0.019540390879478828, &#39;latest_Price&#39;: 12.28, &#39;latest_Dividend&#39;: 0.239956, &#39;market_Capit_in_M&#39;: 5816.0532, &#39;company_Name&#39;: &#39;TIM Participacoes S.A. American Depositary Shares (Each representing 5)&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;RWGE&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 10.3575, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 388.40624, &#39;company_Name&#39;: &#39;Regalwood Global Energy Ltd. Class A&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;RPT&#39;: {&#39;Dividend_Yield&#39;: 0.00641025641025641, &#39;latest_Price&#39;: 11.7, &#39;latest_Dividend&#39;: 0.075, &#39;market_Capit_in_M&#39;: 948.78221, &#39;company_Name&#39;: &#39;RPT Realty&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;NID&#39;: {&#39;Dividend_Yield&#39;: 0.03669595782073813, &#39;latest_Price&#39;: 14.225, &#39;latest_Dividend&#39;: 0.5219999999999999, &#39;market_Capit_in_M&#39;: 666.81683, &#39;company_Name&#39;: &#39;Nuveen Intermediate Duration Municipal Term Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PMF&#39;: {&#39;Dividend_Yield&#39;: 0.04996568291008924, &#39;latest_Price&#39;: 14.57, &#39;latest_Dividend&#39;: 0.7280000000000002, &#39;market_Capit_in_M&#39;: 375.627712, &#39;company_Name&#39;: &#39;PIMCO Municipal Income Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JMLP&#39;: {&#39;Dividend_Yield&#39;: 0.040540540540540536, &#39;latest_Price&#39;: 1.11, &#39;latest_Dividend&#39;: 0.045, &#39;market_Capit_in_M&#39;: 14.985222, &#39;company_Name&#39;: &#39;Nuveen All Cap Energy MLP Opportunities Fund of Beneficial Interest&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;POL&#39;: {&#39;Dividend_Yield&#39;: 0.024321133412042506, &#39;latest_Price&#39;: 25.41, &#39;latest_Dividend&#39;: 0.6180000000000001, &#39;market_Capit_in_M&#39;: 2322.40538, &#39;company_Name&#39;: &#39;PolyOne Corporation&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;RTN&#39;: {&#39;Dividend_Yield&#39;: 0.008058310533515732, &#39;latest_Price&#39;: 116.96, &#39;latest_Dividend&#39;: 0.9425, &#39;market_Capit_in_M&#39;: 32566.4584, &#39;company_Name&#39;: &#39;Raytheon Company&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;RTW&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 0.2534, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 16.547147, &#39;company_Name&#39;: &#39;RTW Retailwinds, Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SMTA&#39;: {&#39;Dividend_Yield&#39;: 11.711829077644607, &#39;latest_Price&#39;: 0.7676, &#39;latest_Dividend&#39;: 8.99, &#39;market_Capit_in_M&#39;: 33.143432, &#39;company_Name&#39;: &#39;Spirit MTA REIT&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;THGA&#39;: {&#39;Dividend_Yield&#39;: 0.03130914826498423, &#39;latest_Price&#39;: 25.36, &#39;latest_Dividend&#39;: 0.794, &#39;market_Capit_in_M&#39;: 1075.264, &#39;company_Name&#39;: &#39;The Hanover Insurance Group Inc. 6.35% Subordinated Debentures due 2053&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;NNC&#39;: {&#39;Dividend_Yield&#39;: 0.0021961932650073207, &#39;latest_Price&#39;: 13.66, &#39;latest_Dividend&#39;: 0.03, &#39;market_Capit_in_M&#39;: 224.276704, &#39;company_Name&#39;: &#39;Nuveen North Carolina Quality Municipal Income Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;NX&#39;: {&#39;Dividend_Yield&#39;: 0.012070916635231988, &#39;latest_Price&#39;: 26.51, &#39;latest_Dividend&#39;: 0.32, &#39;market_Capit_in_M&#39;: 891.80173, &#39;company_Name&#39;: &#39;Quanex Building Products Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;VSTO&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 30.415, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1773.90323, &#39;company_Name&#39;: &#39;Vista Outdoor Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;LTM&#39;: {&#39;Dividend_Yield&#39;: 0.02928348909657321, &#39;latest_Price&#39;: 3.21, &#39;latest_Dividend&#39;: 0.094, &#39;market_Capit_in_M&#39;: 1831.80902, &#39;company_Name&#39;: &#39;LATAM Airlines Group S.A.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;NPTN&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 11.025, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 559.87155, &#39;company_Name&#39;: &#39;NeoPhotonics Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PRH&#39;: {&#39;Dividend_Yield&#39;: 0.02829736211031175, &#39;latest_Price&#39;: 25.02, &#39;latest_Dividend&#39;: 0.708, &#39;market_Capit_in_M&#39;: 10684.6413, &#39;company_Name&#39;: &#39;Prudential Financial Inc. 5.70% Junior Subordinated Notes due 2053&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JHD&#39;: {&#39;Dividend_Yield&#39;: 0.04141414141414141, &#39;latest_Price&#39;: 9.9, &#39;latest_Dividend&#39;: 0.41, &#39;market_Capit_in_M&#39;: 267.934576, &#39;company_Name&#39;: &#39;Nuveen High Income December 2019 Target Term Fund of Beneficial Interest&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JHY&#39;: {&#39;Dividend_Yield&#39;: 0.007457983193277312, &#39;latest_Price&#39;: 9.52, &#39;latest_Dividend&#39;: 0.07100000000000001, &#39;market_Capit_in_M&#39;: 150.40744, &#39;company_Name&#39;: &#39;Nuveen High Income 2020 Target Term Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ROAN&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 1.52, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 234.58768, &#39;company_Name&#39;: &#39;Roan Resources, Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PVT&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 9.9, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 284.624992, &#39;company_Name&#39;: &#39;Pivotal Acquisition Corp.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;NTC&#39;: {&#39;Dividend_Yield&#39;: 0.15946843853820603, &#39;latest_Price&#39;: 12.04, &#39;latest_Dividend&#39;: 1.9200000000000004, &#39;market_Capit_in_M&#39;: 172.521152, &#39;company_Name&#39;: &#39;Nuveen Connecticut Quality Municipal Income Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;NTX&#39;: {&#39;Dividend_Yield&#39;: 0.0030396174863387975, &#39;latest_Price&#39;: 14.64, &#39;latest_Dividend&#39;: 0.0445, &#39;market_Capit_in_M&#39;: 145.794048, &#39;company_Name&#39;: &#39;Nuveen Texas Quality Municipal Income Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JMF&#39;: {&#39;Dividend_Yield&#39;: 0.040559440559440565, &#39;latest_Price&#39;: 1.43, &#39;latest_Dividend&#39;: 0.058, &#39;market_Capit_in_M&#39;: 58.32498, &#39;company_Name&#39;: &#39;Nuveen Energy MLP Total Return Fund of Beneficial Interest&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SPAQ&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 8.96, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 618.17274, &#39;company_Name&#39;: &#39;Spartan Energy Acquisition Corp.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BKI&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 72.58, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 11380.5445, &#39;company_Name&#39;: &#39;Black Knight Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;WBC&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 136.46, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 7010.7146, &#39;company_Name&#39;: &#39;Wabco Holdings Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TMV&#39;: {&#39;Dividend_Yield&#39;: 0.002470966147763776, &#39;latest_Price&#39;: 80.94, &#39;latest_Dividend&#39;: 0.2, &#39;market_Capit_in_M&#39;: 216.004324, &#39;company_Name&#39;: &#39;Direxion Daily 20-Year Treasury Bear 3X&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;SRTY&#39;: {&#39;Dividend_Yield&#39;: 0.0147577053109851, &#39;latest_Price&#39;: 11.1806, &#39;latest_Dividend&#39;: 0.165, &#39;market_Capit_in_M&#39;: 55.061162, &#39;company_Name&#39;: &#39;ProShares UltraPro Short Russell2000&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;OEC&#39;: {&#39;Dividend_Yield&#39;: 0.010162601626016262, &#39;latest_Price&#39;: 19.68, &#39;latest_Dividend&#39;: 0.2, &#39;market_Capit_in_M&#39;: 1190.87424, &#39;company_Name&#39;: &#39;Orion Engineered Carbons SA&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MSL&#39;: {&#39;Dividend_Yield&#39;: 0.003496503496503497, &#39;latest_Price&#39;: 11.44, &#39;latest_Dividend&#39;: 0.04, &#39;market_Capit_in_M&#39;: 191.415216, &#39;company_Name&#39;: &#39;MidSouth Bancorp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TU&#39;: {&#39;Dividend_Yield&#39;: 0.046466165413533836, &#39;latest_Price&#39;: 19.95, &#39;latest_Dividend&#39;: 0.9269999999999999, &#39;market_Capit_in_M&#39;: 25875.1488, &#39;company_Name&#39;: &#39;Telus Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;TWND&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 9.95, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 415.681152, &#39;company_Name&#39;: &#39;Tailwind Acquisition Corp.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SCHI&#39;: {&#39;Dividend_Yield&#39;: 0.022664326116637407, &#39;latest_Price&#39;: 51.27, &#39;latest_Dividend&#39;: 1.162, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Schwab 5-10 Year Corporate Bond ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;SJI&#39;: {&#39;Dividend_Yield&#39;: 0.05307299755935212, &#39;latest_Price&#39;: 22.535, &#39;latest_Dividend&#39;: 1.196, &#39;market_Capit_in_M&#39;: 2276.80128, &#39;company_Name&#39;: &#39;South Jersey Industries Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ZJPN&#39;: {&#39;Dividend_Yield&#39;: 0.01643795438303498, &#39;latest_Price&#39;: 91.3739, &#39;latest_Dividend&#39;: 1.502, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;SPDR Solactive Japan ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;YXI&#39;: {&#39;Dividend_Yield&#39;: 0.0007751937984496124, &#39;latest_Price&#39;: 14.19, &#39;latest_Dividend&#39;: 0.011, &#39;market_Capit_in_M&#39;: 6.285545, &#39;company_Name&#39;: &#39;ProShares Short FTSE China 50&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;UPV&#39;: {&#39;Dividend_Yield&#39;: 0.0011399831214439335, &#39;latest_Price&#39;: 58.7728, &#39;latest_Dividend&#39;: 0.067, &#39;market_Capit_in_M&#39;: 7.34022, &#39;company_Name&#39;: &#39;ProShares Ultra FTSE Europe&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;FT&#39;: {&#39;Dividend_Yield&#39;: 0.051405622489959855, &#39;latest_Price&#39;: 7.47, &#39;latest_Dividend&#39;: 0.3840000000000001, &#39;market_Capit_in_M&#39;: 187.73528, &#39;company_Name&#39;: &#39;Franklin Universal Trust&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;FRC&#39;: {&#39;Dividend_Yield&#39;: 0.004746844831576012, &#39;latest_Price&#39;: 168.533, &#39;latest_Dividend&#39;: 0.8, &#39;market_Capit_in_M&#39;: 29363.755, &#39;company_Name&#39;: &#39;First Republic Bank&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BOOT&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 62.45, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1811.34349, &#39;company_Name&#39;: &#39;Boot Barn Holdings Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;UTRN&#39;: {&#39;Dividend_Yield&#39;: 0.0846598285954366, &#39;latest_Price&#39;: 31.6561, &#39;latest_Dividend&#39;: 2.68, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Vesper U.S. Large Cap Short-Term Reversal Strategy ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;RUSL&#39;: {&#39;Dividend_Yield&#39;: 0.015394679459223723, &#39;latest_Price&#39;: 22.93, &#39;latest_Dividend&#39;: 0.353, &#39;market_Capit_in_M&#39;: 138.227922, &#39;company_Name&#39;: &#39;Direxion Daily Russia Bull 3x Shares&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;URA&#39;: {&#39;Dividend_Yield&#39;: 0.013928475396611994, &#39;latest_Price&#39;: 18.595, &#39;latest_Dividend&#39;: 0.259, &#39;market_Capit_in_M&#39;: 246.09468, &#39;company_Name&#39;: &#39;Global X Uranium&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;RL&#39;: {&#39;Dividend_Yield&#39;: 0.0057747188181970785, &#39;latest_Price&#39;: 119.14, &#39;latest_Dividend&#39;: 0.688, &#39;market_Capit_in_M&#39;: 8711.3257, &#39;company_Name&#39;: &#39;Ralph Lauren Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;AFG&#39;: {&#39;Dividend_Yield&#39;: 0.0336991272790115, &#39;latest_Price&#39;: 115.73, &#39;latest_Dividend&#39;: 3.9000000000000004, &#39;market_Capit_in_M&#39;: 9998.9903, &#39;company_Name&#39;: &#39;American Financial Group Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;JMPB&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 25.48, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;JMP Group Inc 8.00% Senior Notes due 2023&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;CLI&#39;: {&#39;Dividend_Yield&#39;: 0.024405125076266018, &#39;latest_Price&#39;: 16.39, &#39;latest_Dividend&#39;: 0.4, &#39;market_Capit_in_M&#39;: 1487.04819, &#39;company_Name&#39;: &#39;Mack-Cali Realty Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ADC&#39;: {&#39;Dividend_Yield&#39;: 0.03619513641755635, &#39;latest_Price&#39;: 67.44, &#39;latest_Dividend&#39;: 2.4410000000000003, &#39;market_Capit_in_M&#39;: 4287.36333, &#39;company_Name&#39;: &#39;Agree Realty Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;WDR&#39;: {&#39;Dividend_Yield&#39;: 0.04983057604145904, &#39;latest_Price&#39;: 25.085, &#39;latest_Dividend&#39;: 1.25, &#39;market_Capit_in_M&#39;: 1559.74003, &#39;company_Name&#39;: &#39;Waddell &amp; Reed Financial Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;AMX&#39;: {&#39;Dividend_Yield&#39;: 0.025787545787545784, &#39;latest_Price&#39;: 13.65, &#39;latest_Dividend&#39;: 0.352, &#39;market_Capit_in_M&#39;: 45449.855, &#39;company_Name&#39;: &#39;America Movil S.A.B. de C.V.n Depository Receipt Series L&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SSG&#39;: {&#39;Dividend_Yield&#39;: 0.0044362292051756, &#39;latest_Price&#39;: 10.82, &#39;latest_Dividend&#39;: 0.048, &#39;market_Capit_in_M&#39;: 4.852045, &#39;company_Name&#39;: &#39;ProShares UltraShort Semiconductors&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;TOTL&#39;: {&#39;Dividend_Yield&#39;: 0.02862476664592408, &#39;latest_Price&#39;: 48.21, &#39;latest_Dividend&#39;: 1.38, &#39;market_Capit_in_M&#39;: 3139.2, &#39;company_Name&#39;: &#39;SPDR DoubleLine Total Return Tactical&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;SPVM&#39;: {&#39;Dividend_Yield&#39;: 0.013369098712446351, &#39;latest_Price&#39;: 46.6, &#39;latest_Dividend&#39;: 0.623, &#39;market_Capit_in_M&#39;: 2.772458, &#39;company_Name&#39;: &#39;PowerShares S&amp;P 500 Value With Momentum Portfolio&#39;, &#39;exchange&#39;: &#39;BATS Exchange&#39;}, &#39;HVT-A&#39;: {&#39;Dividend_Yield&#39;: 0.07108108108108109, &#39;latest_Price&#39;: 37.0, &#39;latest_Dividend&#39;: 2.6300000000000003, &#39;market_Capit_in_M&#39;: 651.89562, &#39;company_Name&#39;: &#39;Haverty Furniture Companies, Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SPUN&#39;: {&#39;Dividend_Yield&#39;: 0.011370558375634518, &#39;latest_Price&#39;: 19.7, &#39;latest_Dividend&#39;: 0.224, &#39;market_Capit_in_M&#39;: 3.94, &#39;company_Name&#39;: &#39;VanEck Vectors Spin-Off&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;AADR&#39;: {&#39;Dividend_Yield&#39;: 0.0010815173527037934, &#39;latest_Price&#39;: 61.95, &#39;latest_Dividend&#39;: 0.067, &#39;market_Capit_in_M&#39;: 109.0125, &#39;company_Name&#39;: &#39;AdvisorShares Dorsey Wright ADR&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;ACSG&#39;: {&#39;Dividend_Yield&#39;: 0.01693972179289026, &#39;latest_Price&#39;: 32.35, &#39;latest_Dividend&#39;: 0.548, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Xtrackers MSCI ACWI ex USA ESG Leaders Equity ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;USCI&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 35.09, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 443.40576, &#39;company_Name&#39;: &#39;United States Commodity Index Fund ETV&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;WBIG&#39;: {&#39;Dividend_Yield&#39;: 0.010803983174385029, &#39;latest_Price&#39;: 25.1759, &#39;latest_Dividend&#39;: 0.272, &#39;market_Capit_in_M&#39;: 103.949951, &#39;company_Name&#39;: &#39;WBI Tactical LCY Shares&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;REVS&#39;: {&#39;Dividend_Yield&#39;: 0.2452205882352941, &#39;latest_Price&#39;: 19.04, &#39;latest_Dividend&#39;: 4.669, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Columbia Research Enhanced Value ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;LOUP&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 53.15, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Innovator Loup Frontier Tech ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;DLPH&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 17.02, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1469.67181, &#39;company_Name&#39;: &#39;Delphi Technologies PLC&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SDT&#39;: {&#39;Dividend_Yield&#39;: 0.705351264929935, &#39;latest_Price&#39;: 0.170128, &#39;latest_Dividend&#39;: 0.12, &#39;market_Capit_in_M&#39;: 4.763584, &#39;company_Name&#39;: &#39;SandRidge Mississippian Trust I of Beneficial Interest&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ITEQ&#39;: {&#39;Dividend_Yield&#39;: 0.006914977212006915, &#39;latest_Price&#39;: 63.63, &#39;latest_Dividend&#39;: 0.44, &#39;market_Capit_in_M&#39;: 59.52, &#39;company_Name&#39;: &#39;BlueStar Israel Technology&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;PAMC&#39;: {&#39;Dividend_Yield&#39;: 0.0024798154555940024, &#39;latest_Price&#39;: 34.68, &#39;latest_Dividend&#39;: 0.08600000000000001, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Pacer Lunt MidCap Multi-Factor Alternator ETF&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;COTV&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 44.75, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 4250.775, &#39;company_Name&#39;: &#39;Cotiviti Holdings Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PPMC&#39;: {&#39;Dividend_Yield&#39;: 0.004118746633716693, &#39;latest_Price&#39;: 22.0941, &#39;latest_Dividend&#39;: 0.091, &#39;market_Capit_in_M&#39;: 2.637346, &#39;company_Name&#39;: &#39;Portfolio S&amp;P Mid Cap&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;MOTO&#39;: {&#39;Dividend_Yield&#39;: 0.025801169590643273, &#39;latest_Price&#39;: 42.75, &#39;latest_Dividend&#39;: 1.103, &#39;market_Capit_in_M&#39;: 22426.837, &#39;company_Name&#39;: &#39;SmartETFs Smart Transportation &amp; Technology ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;BID&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 26.12, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 1101.9584, &#39;company_Name&#39;: &#34;Sotheby&#39;s&#34;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;MLPZ&#39;: {&#39;Dividend_Yield&#39;: 0.2626108998732573, &#39;latest_Price&#39;: 3.945, &#39;latest_Dividend&#39;: 1.036, &#39;market_Capit_in_M&#39;: 29.673096, &#39;company_Name&#39;: &#39;UBS AG ETRACS ETRACS 2xMonthly Leveraged S&amp;P MLP Index ETN Series B due February 12 2046&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;FLHK&#39;: {&#39;Dividend_Yield&#39;: 0.02842689352167901, &#39;latest_Price&#39;: 28.5645, &#39;latest_Dividend&#39;: 0.812, &#39;market_Capit_in_M&#39;: 20.6514, &#39;company_Name&#39;: &#39;Franklin FTSE Hong Kong&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;QSY&#39;: {&#39;Dividend_Yield&#39;: 0.015562240113244275, &#39;latest_Price&#39;: 113.03, &#39;latest_Dividend&#39;: 1.7590000000000003, &#39;market_Capit_in_M&#39;: 39.88224, &#39;company_Name&#39;: &#39;WisdomTree U.S. Quality Shareholder Yield Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;MDYV&#39;: {&#39;Dividend_Yield&#39;: 0.01438815990234971, &#39;latest_Price&#39;: 65.54, &#39;latest_Dividend&#39;: 0.9430000000000001, &#39;market_Capit_in_M&#39;: 1500.24, &#39;company_Name&#39;: &#39;SPDR S&amp;P 400 Mid Cap Value ETF (based on S&amp;P MidCap 400 Value Index--symbol: MGD&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;CCOR&#39;: {&#39;Dividend_Yield&#39;: 0.013473605860846253, &#39;latest_Price&#39;: 29.0197, &#39;latest_Dividend&#39;: 0.391, &#39;market_Capit_in_M&#39;: 85.930847, &#39;company_Name&#39;: &#39;Cambria Core Equity&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;PHYL&#39;: {&#39;Dividend_Yield&#39;: 0.0727873789431606, &#39;latest_Price&#39;: 40.7763, &#39;latest_Dividend&#39;: 2.968, &#39;market_Capit_in_M&#39;: 314.828608, &#39;company_Name&#39;: &#39;PGIM Active High Yield Bond ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;IVR-PA&#39;: {&#39;Dividend_Yield&#39;: 0.07876422764227642, &#39;latest_Price&#39;: 24.6, &#39;latest_Dividend&#39;: 1.9376, &#39;market_Capit_in_M&#39;: 1996.51405, &#39;company_Name&#39;: &#39;Invesco Mortgage Capital Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PAF&#39;: {&#39;Dividend_Yield&#39;: 0.03974153892423801, &#39;latest_Price&#39;: 53.1995, &#39;latest_Dividend&#39;: 2.11423, &#39;market_Capit_in_M&#39;: 31456.0369, &#39;company_Name&#39;: &#39;PowerShares FTSE RAFI Asia Pacific ex-Japan Portfolio&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;RXN&#39;: {&#39;Dividend_Yield&#39;: 0.007013815090329437, &#39;latest_Price&#39;: 47.05, &#39;latest_Dividend&#39;: 0.33, &#39;market_Capit_in_M&#39;: 5627.8385, &#39;company_Name&#39;: &#39;Rexnord Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;OEW&#39;: {&#39;Dividend_Yield&#39;: 0.01921727297687905, &#39;latest_Price&#39;: 33.1431, &#39;latest_Dividend&#39;: 0.63692, &#39;market_Capit_in_M&#39;: 3.31431, &#39;company_Name&#39;: &#39;Guggenheim ETF Trust&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;OASI&#39;: {&#39;Dividend_Yield&#39;: 0.07174335295702028, &#39;latest_Price&#39;: 25.989, &#39;latest_Dividend&#39;: 1.864538, &#39;market_Capit_in_M&#39;: 9.09615, &#39;company_Name&#39;: &#34;O&#39;Shares FTSE Asia Pacific Quality Dividend&#34;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;GDXX&#39;: {&#39;Dividend_Yield&#39;: 0.0020659527326440177, &#39;latest_Price&#39;: 54.16, &#39;latest_Dividend&#39;: 0.111892, &#39;market_Capit_in_M&#39;: 11.923059, &#39;company_Name&#39;: &#39;ProShares Ultra Gold Miners&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;EMEM&#39;: {&#39;Dividend_Yield&#39;: 0.04736217133163698, &#39;latest_Price&#39;: 23.58, &#39;latest_Dividend&#39;: 1.1168, &#39;market_Capit_in_M&#39;: 10.190521, &#39;company_Name&#39;: &#39;Virtus Glovista Emerging Markets&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;PPEM&#39;: {&#39;Dividend_Yield&#39;: 0.028714725027405102, &#39;latest_Price&#39;: 20.6166, &#39;latest_Dividend&#39;: 0.592, &#39;market_Capit_in_M&#39;: 533.376832, &#39;company_Name&#39;: &#39;Portfolio Emerging Markets&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;SDEM&#39;: {&#39;Dividend_Yield&#39;: 0.057001239157373, &#39;latest_Price&#39;: 12.105, &#39;latest_Dividend&#39;: 0.6900000000000002, &#39;market_Capit_in_M&#39;: 20.084307, &#39;company_Name&#39;: &#39;Global X MSCI SuperDividend Emerging Markets&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;ESNG&#39;: {&#39;Dividend_Yield&#39;: 0.00961881589618816, &#39;latest_Price&#39;: 61.65, &#39;latest_Dividend&#39;: 0.593, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Direxion Shares ETF Trust - Direxion MSCI USA ESG Universal Movers Versus Laggards ETF&#39;, &#39;exchange&#39;: &#39;NYSE American&#39;}, &#39;SYG&#39;: {&#39;Dividend_Yield&#39;: 0.004251251477875884, &#39;latest_Price&#39;: 119.259, &#39;latest_Dividend&#39;: 0.507, &#39;market_Capit_in_M&#39;: 37.166445, &#39;company_Name&#39;: &#39;SPDR MFS Systematic Growth Equity&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;GOEX&#39;: {&#39;Dividend_Yield&#39;: 0.032421015576872304, &#39;latest_Price&#39;: 28.4075, &#39;latest_Dividend&#39;: 0.921, &#39;market_Capit_in_M&#39;: 33.374527, &#39;company_Name&#39;: &#39;Global X Gold Explorers&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;RTEC&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 23.67, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 762.174, &#39;company_Name&#39;: &#39;Rudolph Technologies Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;PSB-PZ&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 26.44, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;PS Business Parks, Inc.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SHNY&#39;: {&#39;Dividend_Yield&#39;: 0.036303999999999996, &#39;latest_Price&#39;: 5.0, &#39;latest_Dividend&#39;: 0.18152, &#39;market_Capit_in_M&#39;: 4.000005, &#39;company_Name&#39;: &#39;Direxion Funds&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;PACE-UN&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 10.8469, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;TPG Pace Tech Opportunities Corp.&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;BXMX&#39;: {&#39;Dividend_Yield&#39;: 0.06398809523809523, &#39;latest_Price&#39;: 13.44, &#39;latest_Dividend&#39;: 0.86, &#39;market_Capit_in_M&#39;: 1398.92928, &#39;company_Name&#39;: &#39;Nuveen S&amp;P 500 BuyWrite Income Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;SZK&#39;: {&#39;Dividend_Yield&#39;: 0.001883305672281272, &#39;latest_Price&#39;: 8.4957, &#39;latest_Dividend&#39;: 0.016, &#39;market_Capit_in_M&#39;: 1.542786, &#39;company_Name&#39;: &#39;ProShares UltraShort Consumer Goods&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;EGPT&#39;: {&#39;Dividend_Yield&#39;: 0.024732884843688168, &#39;latest_Price&#39;: 25.27, &#39;latest_Dividend&#39;: 0.625, &#39;market_Capit_in_M&#39;: 57.739904, &#39;company_Name&#39;: &#39;VanEck Vectors Egypt Index&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;EELV&#39;: {&#39;Dividend_Yield&#39;: 0.01601713062098501, &#39;latest_Price&#39;: 23.35, &#39;latest_Dividend&#39;: 0.374, &#39;market_Capit_in_M&#39;: 342.912, &#39;company_Name&#39;: &#39;PowerShares S&amp;P Emerging Markets Low Volatility Portfolio&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;SDGA&#39;: {&#39;Dividend_Yield&#39;: 0.011997253361931288, &#39;latest_Price&#39;: 25.9226, &#39;latest_Dividend&#39;: 0.311, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;Impact Shares Sustainable Development Goals Global Equity ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;EBND&#39;: {&#39;Dividend_Yield&#39;: 0.038769587928032506, &#39;latest_Price&#39;: 25.845, &#39;latest_Dividend&#39;: 1.002, &#39;market_Capit_in_M&#39;: 739.568, &#39;company_Name&#39;: &#39;SPDR Bloomberg Barclays Emerging Markets Local Bond&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;MOM&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 21.5366, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 4.689, &#39;company_Name&#39;: &#39;AGFiQ U.S. Market Neutral Momentum Fund&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;ELS&#39;: {&#39;Dividend_Yield&#39;: 0.021534653465346533, &#39;latest_Price&#39;: 64.64, &#39;latest_Dividend&#39;: 1.392, &#39;market_Capit_in_M&#39;: 11783.8715, &#39;company_Name&#39;: &#39;Equity LifeStyle Properties Inc&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;RISE&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 19.945, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 3588.29338, &#39;company_Name&#39;: &#39;Sit Rising Rate&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;ZIG&#39;: {&#39;Dividend_Yield&#39;: 0.001623762376237624, &#39;latest_Price&#39;: 25.25, &#39;latest_Dividend&#39;: 0.041, &#39;market_Capit_in_M&#39;: 0.0, &#39;company_Name&#39;: &#39;The Acquirers Fund ETF&#39;, &#39;exchange&#39;: &#39;NYSEArca&#39;}, &#39;AVYA&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 27.87, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 2338.3767, &#39;company_Name&#39;: &#39;Avaya Holdings Corp&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;COMB&#39;: {&#39;Dividend_Yield&#39;: 0.0006462035541195476, &#39;latest_Price&#39;: 24.76, &#39;latest_Dividend&#39;: 0.016, &#39;market_Capit_in_M&#39;: 60.687, &#39;company_Name&#39;: &#39;GraniteShares Bloomberg Commodity Broad Strategy No K-1&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange Arca&#39;}, &#39;IPOD&#39;: {&#39;Dividend_Yield&#39;: 0.0, &#39;latest_Price&#39;: 10.93, &#39;latest_Dividend&#39;: 0.0, &#39;market_Capit_in_M&#39;: 628.47501, &#39;company_Name&#39;: &#39;Social Capital Hedosophia Holdi&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}, &#39;ES&#39;: {&#39;Dividend_Yield&#39;: 0.026813110181311016, &#39;latest_Price&#39;: 86.04, &#39;latest_Dividend&#39;: 2.307, &#39;market_Capit_in_M&#39;: 29539.3382, &#39;company_Name&#39;: &#39;Eversource Energy&#39;, &#39;exchange&#39;: &#39;New York Stock Exchange&#39;}} . Сбор данных может занять значительное по продолжительности время. После их можно представить в виде отсортированного DataFrame, где сверху будут акций с высокой дивидендной доходностью. . import pandas as pd DivYield_dataframe = pd.DataFrame.from_dict(DivYield, orient=&#39;index&#39;) DivYield_dataframe = DivYield_dataframe.sort_values([&#39;Dividend_Yield&#39;], ascending=[False]) DivYield_dataframe.head(15) . Dividend_Yield latest_Price latest_Dividend market_Capit_in_M company_Name exchange . SMTA 11.711829 | 0.767600 | 8.9900 | 33.143432 | Spirit MTA REIT | New York Stock Exchange | . FELP 1.517067 | 0.158200 | 0.2400 | 23.080430 | Foresight Energy LP representing Limited Partn... | New York Stock Exchange | . MDLX 0.732039 | 2.349600 | 1.7200 | 0.000000 | Medley LLC 6.875% Senior Notes due 2026 | New York Stock Exchange | . MDLQ 0.719920 | 2.510000 | 1.8070 | 0.000000 | Medley LLC 7.25% Notes due 2024 | New York Stock Exchange | . SDT 0.705351 | 0.170128 | 0.1200 | 4.763584 | SandRidge Mississippian Trust I of Beneficial ... | New York Stock Exchange | . BAP 0.281443 | 137.870000 | 38.8026 | 10996.718600 | Credicorp Ltd | New York Stock Exchange | . MLPZ 0.262611 | 3.945000 | 1.0360 | 29.673096 | UBS AG ETRACS ETRACS 2xMonthly Leveraged S&amp;P M... | New York Stock Exchange Arca | . REVS 0.245221 | 19.040000 | 4.6690 | 0.000000 | Columbia Research Enhanced Value ETF | NYSEArca | . BMA 0.168212 | 13.370000 | 2.2490 | 1366.801660 | Banco Macro S.A. ADR (representing Ten Class B) | New York Stock Exchange | . NTC 0.159468 | 12.040000 | 1.9200 | 172.521152 | Nuveen Connecticut Quality Municipal Income Fund | New York Stock Exchange | . ET 0.118785 | 7.711400 | 0.9160 | 20847.693800 | Energy Transfer LP | New York Stock Exchange | . FMO 0.093848 | 9.590000 | 0.9000 | 67.975360 | Fiduciary/Claymore Energy Infrastructure Fund | New York Stock Exchange | . MFGP 0.091487 | 8.070000 | 0.7383 | 2676.697860 | Micro Focus Intl PLC ADS each representing One... | New York Stock Exchange | . VPC 0.087842 | 23.360000 | 2.0520 | 0.000000 | Virtus Private Credit ETF | NYSEArca | . FSD 0.087708 | 15.049900 | 1.3200 | 503.721664 | First Trust High Income Long/Short Fund | New York Stock Exchange | . &#1040;&#1085;&#1072;&#1083;&#1080;&#1079; &#1087;&#1086;&#1083;&#1091;&#1095;&#1077;&#1085;&#1085;&#1086;&#1075;&#1086; &#1088;&#1077;&#1079;&#1091;&#1083;&#1100;&#1090;&#1072;&#1090;&#1072; &#1080; &#1079;&#1072;&#1082;&#1083;&#1102;&#1095;&#1077;&#1085;&#1080;&#1077; . Предварительно проведем расчет средней дивидендной доходности по акциям которые платят дивиденды: . meanDivNasdaq = DivYield_dataframe[DivYield_dataframe[&#39;Dividend_Yield&#39;]&gt;0][&#39;Dividend_Yield&#39;].mean() print(&quot;Средняя дивидендная доходность по рынку Nasdaq равна &quot;, &quot;{:.2%}&quot;.format(meanDivNasdaq)) . Средняя дивидендная доходность по рынку Nasdaq равна 12.22% . Самой высокой дивидендной доходностью в полученных результатах у акций компании Triumph Bancorp Inc — 21,57%. Правда по ним никогда не платили дивиденды. Так что в системе похоже сидит баг. Так же по другим рынкам заметил, что в список могут включаться акции по которым перестали платить дивиденды давно. А так, как подписка Free ограничена по количеству запросов, то подстроить ее не удалось. Так же в том случае, если при проверке выясняется, что дивиденды платили недавно, то все равно необходимо быть осторожным при выборе компаний по данному показателю, так как он может являться результатом падения цены акций и как следствия ростом дивидендной доходности. Так же выплата высоких дивидендов может не сохраниться в будущем, тем более если у компании возникнут финансовые проблемы. . Основной смысл в следующем - анализ дивидендной доходности не должен быть единственным критерием. Я для одного из своих портфелей так же смотрю: EPS, EBITDA, FCF, срок выплаты дивидендов, капитализация компании, чистая рентабельность (отношение выручки к прибыли) и коэффициент Net Debt/EBITDA. . Но как говориться - все вышеприведенное не является инвестиционной рекомендацией и выбор остается за каждым самостоятельно. .",
            "url": "https://zmey56.github.io/blog//russian/python/algotrading/dividend/2021/04/10/high-divident-stocks.html",
            "relUrl": "/russian/python/algotrading/dividend/2021/04/10/high-divident-stocks.html",
            "date": " • Apr 10, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "English - Using machine learning to predict gold mining stock prices",
            "content": "As a basis, I took a notebook published on colab for oil. This notebook examines the analysis of gold prices and shares of gold mining companies using machine analysis methods: linear regression, cluster analysis, and random forest. I immediately warn you that this post does not attempt to show the current situation and predict the future direction. Just like the author for oil, this article does not aim to raise or refute the possibilities of machine learning for analyzing stock prices or other tools. I upgraded the code for gold research in order to encourage those who are interested in further reflection and listen to constructive criticism in their address. . import yfinance as yf import pandas as pd import numpy as np import seaborn as sns from sklearn import metrics import matplotlib.pyplot as plt from sklearn.preprocessing import MinMaxScaler from sklearn.linear_model import LinearRegression . 1. Loading data . For the price of gold, take the value of the exchange-traded investment Fund SPDR Gold Trust, whose shares are 100% backed by precious metal. The quotes will be compared with the prices of gold mining companies &#39; shares: . Newmont Goldcorp (NMM) | Barrick Gold (GOLD) | AngloGold Ashanti (AU) | Kinross Gold (KGC) | Newcrest Mining (ENC) | Polyus (PLZL) | Polymetal (POLY) | Seligdar (SELG) | . gold = pd.DataFrame(yf.download(&quot;GLD&quot;, start=&quot;2010-01-01&quot;, end=&quot;2019-12-31&quot;)[&#39;Adj Close&#39;]) . [*********************100%***********************] 1 of 1 completed . gold = gold.reset_index() gold.columns = [&quot;Date&quot;,&quot;gold_price&quot;] gold[&#39;Date&#39;] = pd.to_datetime(gold[&#39;Date&#39;]) gold.head() . Date gold_price . 0 2010-01-04 | 109.800003 | . 1 2010-01-05 | 109.699997 | . 2 2010-01-06 | 111.510002 | . 3 2010-01-07 | 110.820000 | . 4 2010-01-08 | 111.370003 | . It is necessary to move the price of gold, as we will be interested in how yesterday&#39;s price affected today&#39;s stock price. . gold[&quot;gold_price&quot;] = gold[&quot;gold_price&quot;].shift(1) . shares=[&quot;NMM.SG&quot;,&quot;GOLD&quot;,&quot;AU&quot;,&quot;KGC&quot;,&quot;NCM.AX&quot;,&quot;PLZL.ME&quot;,&quot;POLY.ME&quot;,&quot;SELG.ME&quot;] data= yf.download(shares, start=&quot;2010-01-01&quot;, end=&quot;2019-12-31&quot;)[&#39;Adj Close&#39;] . [*********************100%***********************] 8 of 8 completed . data = data.reset_index() data.head() . Date AU GOLD KGC NCM.AX NMM.SG PLZL.ME POLY.ME SELG.ME . 0 2010-01-04 | 39.698944 | 34.561649 | 18.105721 | 33.237167 | 26.924570 | NaN | NaN | NaN | . 1 2010-01-05 | 40.320408 | 34.989510 | 18.594805 | 33.901924 | 27.116940 | NaN | NaN | NaN | . 2 2010-01-06 | 41.601028 | 35.733963 | 19.256504 | 33.901924 | 27.289278 | NaN | NaN | NaN | . 3 2010-01-07 | 41.130215 | 35.229092 | 19.352404 | 34.298923 | NaN | NaN | NaN | NaN | . 4 2010-01-08 | 41.601028 | 35.451572 | 19.601744 | 33.421829 | 27.702093 | NaN | NaN | NaN | . data[&#39;Date&#39;] = pd.to_datetime(data[&#39;Date&#39;]) . all_data=pd.DataFrame() . for index in range(len(shares)): stock=pd.DataFrame() # transform the data stock=data.loc[:, (&quot;Date&quot;,shares[index])] stock[&quot;Date&quot;]=stock[&quot;Date&quot;].astype(&#39;datetime64[ns]&#39;) stock.columns=[&quot;Date&quot;,&quot;share_price&quot;] test=pd.DataFrame(gold) output=stock.merge(test,on=&quot;Date&quot;,how=&quot;left&quot;) #combining two data sets stock[&quot;gold_price&quot;]=output[&quot;gold_price&quot;] stock[&#39;share_price&#39;]=pd.to_numeric(stock[&#39;share_price&#39;], errors=&#39;coerce&#39;).dropna(0) stock[&#39;gold_price&#39;]=pd.to_numeric(stock[&#39;gold_price&#39;], errors=&#39;coerce&#39;).dropna(0) stock[&quot;year&quot;]=pd.to_datetime(stock[&quot;Date&quot;]).dt.year #Create a column with years for subsequent filtering stock[&quot;name&quot;]=shares[index] stock = stock.dropna() #delete all NAN lines #creating a column with a scaled share price scaler=MinMaxScaler() stock[&quot;share_price_scaled&quot;]=scaler.fit_transform(stock[&quot;share_price&quot;].to_frame()) #add data to the main dataframe all_data=all_data.append(stock) #add the data . all_data_15 = all_data[(all_data[&#39;year&#39;]&gt;2014)&amp;(all_data[&#39;year&#39;]&lt;2020)] all_data_15.head() . Date share_price gold_price year name share_price_scaled . 1301 2015-01-02 | 14.269927 | 113.580002 | 2015 | NMM.SG | 0.052072 | . 1302 2015-01-05 | 14.845476 | 114.080002 | 2015 | NMM.SG | 0.071190 | . 1303 2015-01-06 | 15.601913 | 115.800003 | 2015 | NMM.SG | 0.096317 | . 1304 2015-01-07 | 15.645762 | 117.120003 | 2015 | NMM.SG | 0.097773 | . 1305 2015-01-08 | 15.517859 | 116.430000 | 2015 | NMM.SG | 0.093525 | . 2. Data analysis . It is best to start analyzing data by presenting it visually, which will help you understand it better. . 2.1 Chart of gold price changes . gold[[&#39;Date&#39;,&#39;gold_price&#39;]].set_index(&#39;Date&#39;).plot(color=&quot;green&quot;, linewidth=1.0) plt.show() . 2.2. Plotting the pairplot chart for the price of Polyus and Barrick Gold shares over the past five years . palette=sns.cubehelix_palette(18, start=2, rot=0, dark=0, light=.95, reverse=False) g = sns.pairplot(all_data[(all_data[&#39;name&#39;]==&quot;POLY.ME&quot;)&amp;(all_data[&#39;year&#39;]&gt;2014)&amp;(all_data[&#39;year&#39;]&lt;2020)]. drop([&quot;share_price_scaled&quot;],axis=1), hue=&quot;year&quot;,height=4) g.fig.suptitle(&quot;Polyuse&quot;, y=1.08) palette=sns.cubehelix_palette(18, start=2, rot=0, dark=0, light=.95, reverse=False) f = sns.pairplot(all_data[(all_data[&#39;name&#39;]==&quot;GOLD&quot;)&amp;(all_data[&#39;year&#39;]&gt;2014)&amp;(all_data[&#39;year&#39;]&lt;2020)]. drop([&quot;share_price_scaled&quot;],axis=1), hue=&quot;year&quot;,height=4) f.fig.suptitle(&#39;Barrick Gold&#39;, y=1.08) plt.show() . A paired graph allows you to see the distribution of data by showing the paired relationships in the data set and the univariate distribution of data for each variable. You can also use the palette to see how this data changed in different years. . The chart is particularly interesting for 2016 and 2019, as it looks like the price of the Pole stock, Barrick Gold and the price of gold are lined up along the same line. We can also conclude from the distribution charts that the price of gold and stocks moved gradually towards higher values. . 2.3 Violinplot for the gold price . plt.figure(figsize=(10,10)) sns.set_style(&quot;whitegrid&quot;) palette=sns.cubehelix_palette(5, start=2.8, rot=0, dark=0.2, light=0.8, reverse=False) sns.violinplot(x=&quot;year&quot;, y=&quot;gold_price&quot;, data=all_data_15[[&quot;gold_price&quot;,&quot;year&quot;]], inner=&quot;quart&quot;, palette=palette, trim=True) plt.xlabel(&quot;Year&quot;) plt.ylabel(&quot;Price gold&quot;) plt.show() . 2.4 Violinplot for multiple shares . sns.catplot(x=&quot;year&quot;, y=&quot;share_price_scaled&quot;, col=&#39;name&#39;, col_wrap=3,kind=&quot;violin&quot;, split=True, data=all_data_15,inner=&quot;quart&quot;, palette=palette, trim=True, height=4, aspect=1.2) sns.despine(left=True) . A large fluctuation in gold prices was noted according to the charts in 2016 and 2019. As you can see from the graphs in the following figure, some companies such as Newmont Mining, Barrick Gold, AngloGold Ashanti, Newcrest Mining and Polymetal were also affected. It should also be noted that all prices are marked in the range from 0 to 1 and this may lead to inaccuracies in the interpretation. . Next, we will build distribution charts for one Russian company - Polymetal and one foreign company - Barrick Gold . sns.jointplot(&quot;gold_price&quot;, &quot;share_price&quot;,data=all_data_15[all_data_15[&#39;name&#39;]==&quot;POLY.ME&quot;],kind=&quot;kde&quot;, height=6,ratio=2,color=&quot;red&quot;).plot_joint(sns.kdeplot, zorder=0, n_levels=20) sns.jointplot(&quot;gold_price&quot;, &quot;share_price&quot;,data=all_data_15[all_data_15[&#39;name&#39;]==&quot;GOLD&quot;],kind=&quot;kde&quot;, height=6,ratio=2,color=&quot;red&quot;).plot_joint(sns.kdeplot, zorder=0, n_levels=20) plt.show() . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . It is necessary to pay attention to the distribution of the share price for the two companies and it will become clear that the shape of the density graph is the same for them. . 2.5 Charts of the dependence of the share price of various companies on the price of gold . sns.lmplot(x=&quot;gold_price&quot;, y=&quot;share_price_scaled&quot;, col=&quot;name&quot;,ci=None, col_wrap=3, data=all_data_15, order=1,line_kws={&#39;color&#39;: &#39;blue&#39;},scatter_kws={&#39;color&#39;: &#39;grey&#39;}).set(ylim=(0, 1)) plt.show() . In fact, you won&#39;t be able to see much on these charts, although some stocks seem to have a relationship. . The next step is to try to color the charts depending on the years. . palette=sns.cubehelix_palette(5, start=2, rot=0, dark=0, light=.95, reverse=False) sns.lmplot(x=&quot;gold_price&quot;, y=&quot;share_price_scaled&quot;,hue=&quot;year&quot;, col=&quot;name&quot;,ci=None, col_wrap=3, data=all_data_15, order=1,palette=palette,height=4).set(ylim=(0, 1)) plt.show() . Here the picture is a little better in the sense that some companies have a data cloud stretching along a straight line in some years, which may indicate the existence of a dependency. . 3 Machine learning and prediction . I will give a definition for machine learning from Wikipedia: Machine learning is a class of artificial intelligence methods that are characterized not by direct problem solving, but by learning in the process of applying solutions to many similar problems. To build such methods, we use mathematical statistics, numerical methods, optimization methods, probability theory, graph theory, and various techniques for working with data in digital form. . Usually, machine learning algorithms can be classified into the following categories: learning with a teacher and learning without a teacher. Here is their definition from one of the sites: . Supervised learning is one of the sections of machine learning dedicated to solving the following problem. There is a set of objects (situations) and the set of possible answers (responses, reactions). There is some relationship between responses and objects, but it is unknown. Only a finite set of use cases is known — the &quot;object, response&quot; pairs, called the training sample. Based on this data, you need to restore the dependency, that is, build an algorithm that can give a fairly accurate answer for any object. To measure the accuracy of responses, a quality functional is introduced in a certain way. see the Links) . Unsupervised learning is one of the sections of machine learning. Studies a wide class of data processing problems in which only descriptions of a set of objects (training sample) are known, and it is required to detect internal relationships, dependencies, and patterns that exist between objects. Learning without a teacher is often contrasted with learning with a teacher, when each training object is given a &quot;correct answer&quot;, and you need to find the relationship between the objects and the answers. see links) . The following machine learning methods will be discussed later: . Cluster analysis | Linear regression | Random forest | . Using these algorithms, you can evaluate overvalued or undervalued stocks relative to the price of gold and possible movement on the next day. I remind you that you must be very careful and use the conclusions from this post at your own risk. I also remind you that my main goal is to show the potential of machine learning for stock valuation. . 3.1. Cluster analysis for Barrick Gold stock . Clustering is the task of dividing a set of objects into groups called clusters. Each group should contain &quot;similar&quot; objects, and objects from different groups should be as different as possible. . from sklearn.cluster import KMeans poly=all_data_15[all_data_15[&#39;name&#39;]==&quot;GOLD&quot;] # We need to scale also gold price, so clustering is not influenced by the relative size of one axis. poly=pd.DataFrame(poly) poly[&#39;gold_price_scaled&#39;] = scaler.fit_transform(poly[&quot;gold_price&quot;].to_frame()) poly[&quot;cluster&quot;] = KMeans(n_clusters=5, random_state=1).fit_predict(poly[[&quot;share_price_scaled&quot;,&quot;gold_price_scaled&quot;]]) # The 954 most common RGB monitor colors https://xkcd.com/color/rgb/ colors = [&quot;baby blue&quot;, &quot;amber&quot;, &quot;scarlet&quot;, &quot;grey&quot;,&quot;milk chocolate&quot;, &quot;windows blue&quot;] palette=sns.xkcd_palette(colors) sns.lmplot(x=&quot;gold_price&quot;, y=&quot;share_price_scaled&quot;,ci=None,palette=palette, hue=&quot;cluster&quot;,fit_reg=0 ,data=poly) plt.show() . Cluster analysis is used in a large number of machine learning tasks. But I have given it only for informational purposes, since in this form it does not bring much benefit to our analysis. . 3.2. Linear regression between Barrick Gold shares and the gold price . Next, we will build a regular linear regression using training with a teacher. The goal is to estimate the forecast of data for the last 100 days of 2019 based on data from 2018/2019 (excluding estimated ones). Training data is the data used to build the model, and test data is the data that we will try to predict. . for sh in shares: print(sh) #Data Preparation share_18=pd.DataFrame() share_18=all_data_15[(all_data_15[&#39;name&#39;]==sh)] # Get data 2018/19 share_18=share_18[[&quot;share_price&quot;,&quot;gold_price&quot;]].reset_index() # Just using 1 variable for linear regression. Split the data into training/testing sets train = share_18[:-100] test = share_18[-100:] x_train=train[&quot;gold_price&quot;].to_frame() y_train=train[&#39;share_price&#39;].to_frame() x_test=test[&quot;gold_price&quot;].to_frame() y_test=test[&#39;share_price&#39;].to_frame() regr = LinearRegression() #Create linear regression object regr.fit(x_train,y_train) #Train the model using the training sets print(&quot;Coefficients: &quot;, float(regr.coef_)) print(np.corrcoef(x_train,y_train, rowvar=False)) y_pred = regr.predict(x_test) print(&#39;Mean Absolute Error:&#39;, metrics.mean_absolute_error(y_test, y_pred)) print(&#39;Mean Squared Error:&#39;, metrics.mean_squared_error(y_test, y_pred)) print(&#39;Root Mean Squared Error:&#39;, np.sqrt(metrics.mean_squared_error(y_test, y_pred))) # Plot outputs using matplotlib plt_train=plt.scatter(x_train[&quot;gold_price&quot;],y_train, color=&#39;grey&#39;) plt_test=plt.scatter(x_test[&quot;gold_price&quot;],y_test, color=&#39;green&#39;) plt_pred=plt.scatter(x_test[&quot;gold_price&quot;], y_pred, color=&#39;black&#39;) plt.xlabel(&quot;gold_price&quot;) plt.ylabel(&quot;share_price&quot;) plt.legend((plt_train, plt_test,plt_pred),(&quot;train data&quot;, &quot;test data&quot;,&quot;prediction&quot;)) plt.show() . NMM.SG Coefficients: 0.6629423053739908 [[1. 0.790953] [0.790953 1. ]] Mean Absolute Error: 6.063058573972694 Mean Squared Error: 39.21188296210148 Root Mean Squared Error: 6.261939233344689 . GOLD Coefficients: 0.3355465472461071 [[1. 0.67139243] [0.67139243 1. ]] Mean Absolute Error: 3.3769293704374657 Mean Squared Error: 11.756813554455096 Root Mean Squared Error: 3.4288210152259473 . AU Coefficients: 0.31252669952857776 [[1. 0.67830589] [0.67830589 1. ]] Mean Absolute Error: 2.2471377544809683 Mean Squared Error: 5.789211153877581 Root Mean Squared Error: 2.4060779608893768 . KGC Coefficients: 0.10461302060876282 [[1. 0.78266367] [0.78266367 1. ]] Mean Absolute Error: 1.0583009847297946 Mean Squared Error: 1.1523726951635975 Root Mean Squared Error: 1.073486234268329 . NCM.AX Coefficients: 0.5623005799590818 [[1. 0.79891272] [0.79891272 1. ]] Mean Absolute Error: 2.0335289996635937 Mean Squared Error: 5.836462091267656 Root Mean Squared Error: 2.415877085297937 . PLZL.ME Coefficients: 103.84435014609612 [[1. 0.60373084] [0.60373084 1. ]] Mean Absolute Error: 1315.093426667142 Mean Squared Error: 1776892.2964767825 Root Mean Squared Error: 1333.0012364873419 . POLY.ME Coefficients: 10.772023429299809 [[1. 0.63694034] [0.63694034 1. ]] Mean Absolute Error: 69.33753863275061 Mean Squared Error: 6800.525447108329 Root Mean Squared Error: 82.46529844187995 . SELG.ME Coefficients: 0.15570348678870732 [[1. 0.51630147] [0.51630147 1. ]] Mean Absolute Error: 1.8096071903165585 Mean Squared Error: 4.039450515732427 Root Mean Squared Error: 2.009838430255633 . From the above charts, we can conclude that the price of gold predicts the price of shares of foreign companies on the next day quite well. In Russian companies, this picture looks much worse. Of course, there may be a false impression about Seligdar shares. But visual analysis of the chart allows you to discard this assumption. . 3.3 Random forest on Newmont Goldcorp shares against the price of gold and shares of gold companies . Random forest is a machine learning algorithm that uses a Committee (ensemble) of decision trees. The main idea is to use a large ensemble of decision trees, each of which in itself gives a very low quality of classification, but due to their large number, the result is good. . The random forest algorithm accepts more than one variable in the input data to predict the output data. It works very efficiently on large amounts of data, can handle many input variables, has efficient methods for estimating missing data, and many other advantages. The main disadvantages are: . Random forests is slow to generate forecasts because it has many decision trees. Whenever it makes a forecast, all the trees in the forest must make a forecast for the same given input and then vote on it. This whole process takes a long time. | the Model is difficult to interpret compared to the decision tree, where you can easily make a decision by following the path in the tree. | One of the great advantages of a random forest is that it can be used for both classification and regression problems, which make up most of today&#39;s machine learning systems. I will talk about random forests in classification, since classification is sometimes considered a building block of machine learning. Below you can see what a random forest with two trees looks like: . In addition to the gold price, we will use other variables to forecast the Newmont Goldcorp share price. This will be the share prices of other foreign gold mining companies. I know it doesn&#39;t make a lot of sense, but we just want to see how to build this type of model. This will allow us to see the impact of each of them on the final forecast.Random forest is a machine learning algorithm that uses a Committee (ensemble) of decision trees. The main idea is to use a large ensemble of decision trees, each of which in itself gives a very low quality of classification, but due to their large number, the result is good. . from sklearn.ensemble import RandomForestRegressor # 1.- Data Preparation nmm15=pd.DataFrame() nmm15=all_data_15[(all_data_15[&#39;name&#39;]==&quot;NMM.SG&quot;) &amp; (all_data_15[&#39;year&#39;]&gt;2016 )] nmm15=nmm15[[&quot;share_price&quot;,&quot;gold_price&quot;]].reset_index() # Load share price of other variables nmm15[&#39;GOLD&#39;]=all_data_15[(all_data_15[&#39;name&#39;]==&quot;GOLD&quot;)][-980:].reset_index()[&#39;share_price&#39;] nmm15[&#39;GOLD&#39;] = nmm15[&#39;GOLD&#39;].shift(1) nmm15[&#39;AU&#39;]=all_data_15[(all_data_15[&#39;name&#39;]==&quot;AU&quot;)][-980:].reset_index()[&#39;share_price&#39;] nmm15[&#39;AU&#39;] = nmm15[&#39;AU&#39;].shift(1) nmm15[&#39;KGC&#39;]=all_data_15[(all_data_15[&#39;name&#39;]==&quot;KGC&quot;)][-980:].reset_index()[&#39;share_price&#39;] nmm15[&#39;KGC&#39;] = nmm15[&#39;KGC&#39;].shift(1) nmm15[&#39;NCM.AX&#39;]=all_data_15[(all_data_15[&#39;name&#39;]==&quot;NCM.AX&quot;)][-980:].reset_index()[&#39;share_price&#39;] nmm15[&#39;NCM.AX&#39;] = nmm15[&#39;NCM.AX&#39;].shift(1) nmm15 = nmm15.drop(nmm15.index[0]) train = nmm15[:-100] test = nmm15[-100:] x_train=train[[&quot;gold_price&quot;,&quot;GOLD&quot;,&quot;AU&quot;,&quot;KGC&quot;,&quot;NCM.AX&quot;]] y_train=train[&#39;share_price&#39;] x_test=test[[&quot;gold_price&quot;,&quot;GOLD&quot;,&quot;AU&quot;,&quot;KGC&quot;,&quot;NCM.AX&quot;,]] y_test=test[&#39;share_price&#39;].to_frame() # 2.- Create Randomforest object usinig a max depth=5 regressor = RandomForestRegressor(n_estimators=200, max_depth=5 ) # 3.- Train data clf=regressor.fit(x_train, y_train) # 4.- Predict! y_pred=regressor.predict(x_test) y_pred_list = list(y_pred) y_pred=pd.DataFrame(y_pred) . plt_train=plt.scatter(x_train[&quot;gold_price&quot;],y_train, color=&#39;grey&#39;) plt_pred=plt.scatter(nmm15[&quot;gold_price&quot;], regressor.predict(nmm15[[&quot;gold_price&quot;,&quot;GOLD&quot;,&quot;AU&quot;,&quot;KGC&quot;,&quot;NCM.AX&quot;]]), color=&#39;black&#39;) plt.xlabel(&quot;gold_price&quot;) plt.ylabel(&quot;share_price&quot;) plt.legend((plt_train,plt_pred),(&quot;train data&quot;,&quot;prediction&quot;)) plt.show() . The resulting model looks really good in addition, we must remember that Random Forest has many more parameters to configure, but the key one is the maximum depth, which is unlimited by default. Next, we&#39;ll check how this model predicts or tests data. . plt_train=plt.scatter(x_train[&quot;gold_price&quot;],y_train, color=&#39;grey&#39;) plt_test=plt.scatter(x_test[&quot;gold_price&quot;],y_test, color=&#39;green&#39;) plt_pred=plt.scatter(x_test[&quot;gold_price&quot;], y_pred, color=&#39;black&#39;) plt.xlabel(&quot;gold_price&quot;) plt.ylabel(&quot;share_price&quot;) plt.legend((plt_train, plt_test,plt_pred),(&quot;train data&quot;, &quot;test data&quot;,&quot;prediction&quot;)) plt.show() . y_pred = clf.predict(x_test) print(&#39;Mean Absolute Error:&#39;, metrics.mean_absolute_error(y_test, y_pred)) print(&#39;Mean Squared Error:&#39;, metrics.mean_squared_error(y_test, y_pred)) print(&#39;Root Mean Squared Error:&#39;, np.sqrt(metrics.mean_squared_error(y_test, y_pred))) . Mean Absolute Error: 1.410409517520304 Mean Squared Error: 3.0995744019029483 Root Mean Squared Error: 1.7605608202794212 . importances=regressor.feature_importances_ indices=list(x_train) print(&quot;Feature ranking:&quot;) for f in range(x_train.shape[1]): print(&quot;Feature %s (%f)&quot; % (indices[f], importances[f])) f, (ax1) = plt.subplots(1, 1, figsize=(8, 6), sharex=True) sns.barplot(indices, importances, palette=&quot;BrBG&quot;, ax=ax1) ax1.set_ylabel(&quot;Importance&quot;) . Feature ranking: Feature gold_price (0.627703) Feature GOLD (0.045197) Feature AU (0.040957) Feature KGC (0.038973) Feature NCM.AX (0.247171) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . Text(0, 0.5, &#39;Importance&#39;) . By the importance of the signs, it immediately becomes clear how strong the value of gold is. . In short, I hope I was able to reveal to you the beginnings of a project on using machine learning to study stock prices, and I hope to hear your comments. .",
            "url": "https://zmey56.github.io/blog//english/machine%20learning/algotrading/2020/11/17/ml-prediction-gold-shares.html",
            "relUrl": "/english/machine%20learning/algotrading/2020/11/17/ml-prediction-gold-shares.html",
            "date": " • Nov 17, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Получение котировок акций при помощи Python (перевод)",
            "content": "Представляю вашему вниманию перевод статьи «Historical Stock Price Data in Python» автора Ishan Shah. . Статья о том, как получить ежедневные исторические данные по акциям, используя yfinance, и минутные данные, используя alpha vantage. . Как вы знаете, акции относятся к очень волатильному инструменту и очень важно тщательно анализировать поведение цены, прежде чем принимать какие-либо торговые решения. Ну а сначала надо получить данные и python может помочь в этом. . Биржевые данные могут быть загружены при помощи различных пакетов. В этой статье будут рассмотрены yahoo finance и alpha vantage. . Yahoo Finance . Сначала испытаем yfianance пакет. Его можно установить при помощи команды pip install yfinance. Приведенный ниже код показывает, как получить данные для AAPL с 2016 по 2019 год и построить скорректированную цену закрытия (скорректированная цена закрытия на дивиденды и сплиты) на графике . . . . import yfinance as yf # Get the data for the stock AAPL data = yf.download(&#39;AAPL&#39;,&#39;2016-01-01&#39;,&#39;2019-08-01&#39;) # Import the plotting library import matplotlib.pyplot as plt %matplotlib inline # Plot the close price of the AAPL data[&#39;Adj Close&#39;].plot() plt.show() . [*********************100%***********************] 1 of 1 completed . Ну а если необходимо получить по нескольким акциям, то необходимо внести небольшое дополнение в код. Для хранения значений используется DataFrame. При помощи пакета matplotlib и полученных данных можно построить график дневной доходности. . import pandas as pd tickers_list = [&#39;AAPL&#39;, &#39;WMT&#39;, &#39;IBM&#39;, &#39;MU&#39;, &#39;BA&#39;, &#39;AXP&#39;] # Import pandas data = pd.DataFrame(columns=tickers_list) # Fetch the data for ticker in tickers_list: data[ticker] = yf.download(ticker,&#39;2016-01-01&#39;,&#39;2019-08-01&#39;)[&#39;Adj Close&#39;] # Print first 5 rows of the data data.head() . [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed . AAPL WMT IBM MU BA AXP . Date . 2015-12-31 24.266079 | 54.044613 | 106.805664 | 14.140234 | 129.673157 | 63.341213 | . 2016-01-04 24.286833 | 54.185669 | 105.509621 | 14.309997 | 126.005119 | 61.556175 | . 2016-01-05 23.678221 | 55.472874 | 105.431984 | 14.799313 | 126.516304 | 60.609035 | . 2016-01-06 23.214846 | 56.028313 | 104.904243 | 14.200150 | 124.507416 | 58.925949 | . 2016-01-07 22.235073 | 57.333141 | 103.111473 | 13.640932 | 119.287819 | 58.395412 | . # Plot all the close prices ((data.pct_change()+1).cumprod()).plot(figsize=(10, 7)) # Show the legend plt.legend() # Define the label for the title of the figure plt.title(&quot;Adjusted Close Price&quot;, fontsize=16) # Define the labels for x-axis and y-axis plt.ylabel(&#39;Price&#39;, fontsize=14) plt.xlabel(&#39;Year&#39;, fontsize=14) # Plot the grid lines plt.grid(which=&quot;major&quot;, color=&#39;k&#39;, linestyle=&#39;-.&#39;, linewidth=0.5) plt.show() . Для значений по российским акциям есть небольшая тонкость. К названию акцию добавляется точка и заглавными буквами ME. Спасибо знатоки на смартлабе подсказали. . tickers_list_rus = [&#39;TTLK.ME&#39;, &#39;GMKN.ME&#39;, &#39;LSRG.ME&#39;, &#39;TATNP.ME&#39;, &#39;MSTT.ME&#39;,&#39;YNDX.ME&#39;] data_rus = pd.DataFrame(columns=tickers_list_rus) . for ticker in tickers_list_rus: data_rus[ticker] = yf.download(ticker,&#39;2016-01-01&#39;,&#39;2019-08-01&#39;)[&#39;Adj Close&#39;] . [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed [*********************100%***********************] 1 of 1 completed . data_rus.head() . TTLK.ME GMKN.ME LSRG.ME TATNP.ME MSTT.ME YNDX.ME . Date . 2016-01-04 0.091873 | 5647.466797 | 410.957520 | 112.794388 | 52.599274 | 1064.099976 | . 2016-01-05 0.092520 | 5750.643066 | 422.438416 | 112.513115 | 52.870754 | 1133.900024 | . 2016-01-06 0.092844 | 5690.508789 | 430.975464 | 111.613007 | 52.802883 | 1112.000000 | . 2016-01-11 0.092844 | 5443.646973 | 409.485657 | 110.150345 | 52.056313 | 987.000000 | . 2016-01-12 0.095755 | 5413.896484 | 400.948547 | 108.575157 | 51.581223 | 999.000000 | . ((data_rus.pct_change()+1).cumprod()).plot(figsize=(10, 7)) # Show the legend plt.legend() # Define the label for the title of the figure plt.title(&quot;Adjusted Close Price&quot;, fontsize=16) # Define the labels for x-axis and y-axis plt.ylabel(&#39;Price&#39;, fontsize=14) plt.xlabel(&#39;Year&#39;, fontsize=14) # Plot the grid lines plt.grid(which=&quot;major&quot;, color=&#39;k&#39;, linestyle=&#39;-.&#39;, linewidth=0.5) plt.show() . В дальнейшем эти данные можно проанализировать, создать торговую стратегию и оценить эффективность при помощи пакета pyfolio. В нем можно оценить коэффициент Шарпа, коэффициент Сортино, максимальную просадку и многие другие необходимые показатели. . Надеюсь, что мой перевод оригинальной статьи будет для Вас полезен. Код был проверен и все работает. Но пока для меня остался вопрос в возможности использования Alpha vantage для российского рынка. .",
            "url": "https://zmey56.github.io/blog//english/machine%20learning/algotrading/2020/02/09/getting-stock-quotes-using-python.html",
            "relUrl": "/english/machine%20learning/algotrading/2020/02/09/getting-stock-quotes-using-python.html",
            "date": " • Feb 9, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, I’m Alexander Gladkikh, and I made my own website on GitHub dedicated to my Hobbies: Machine learning, Deep Learning, and algorithmic trading. . I take part in kaggle competitions, have knowledge of R and Python (Pandas, NumPy, Scipy, Scikit-learn, XGBoost), Java . At the main work I participate in projects on the use of new technologies in the field of labor protection and ecology. . I have been engaged in technical analysis of financial markets for a long time. Familiar with software Amibroker, and Metatrader Quik (scripting). . At work I had to deal with the analysis of data in the performance of research in biology at the Institute and writing projects on environmental protection. . My degrees . Corporate Energy University, 2020 . Digital production technologies in the power industry . YANDEX, MIPT, 2019 . Machine learning and data analysis . City Business School, 2019 . MINI-MBA Professional .",
          "url": "https://zmey56.github.io/blog//about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zmey56.github.io/blog//robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}